function kelios(canvasId, param) {
	var sys = {};
	var canvas = document.getElementById(canvasId);
	var alob = function (object, func) {
		var al, num = 0;
		for (al in object) { func(object[al], al, object, num); num++; }
	}
	this.alob = alob;
	var _Concat = function (massiv, add) {
		var lle = add.length, iee = 0;
		for (iee; iee < lle; iee++) {
			massiv.push(add[iee]);
		}
		return massiv;
	}
	var _Concat0 = function (massiv, add) {
		var lle = massiv.length, iee = 0;
		var new_mass = cloneArray(add);
		for (iee; iee < lle; iee++) {
			new_mass.push(massiv[iee]);
		}
		return new_mass;
	}
	var cloneObject = function (obj) {
		if (obj == null || typeof (obj) != 'object' || obj.constructor == sys.constructorWebglBuffer) return obj;
		var temp = new obj.constructor();
		for (var key in obj) {
			temp[key] = cloneObject(obj[key])
		};
		return temp;
	};
	var cloneArray = function (arr) { return arr.slice(0); };
	var namesContexts = ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"];
	var gl = null;
	for (var ii = 0; ii < namesContexts.length; ii++) {
		try {
			gl = canvas.getContext(namesContexts[ii]);
		} catch (e) { }
		if (gl) {
			break;
		}
	}
	//console.log(gl.getExtension('WEBGL_debug_renderer_info'))
	gl.cullFace(gl.FRONT);
	var usingExtension = ["EXT_texture_filter_anisotropic", "OES_standard_derivatives", "WEBGL_draw_buffers", "OES_element_index_uint",
	"OES_texture_float", "OES_texture_float_linear", "OES_texture_half_float", "OES_texture_half_float_linear", "WEBKIT_WEBGL_depth_texture"];
	var ext = gl.getSupportedExtensions();
	usingExtension.forEach(function (e) {
		var us = false;
		ext.forEach(function (ex) {
			if (ex == e) us = true;
		});
		if (us === false) console.warn("Extension '" + e + "' is not supported")
	})
	ext.forEach(function (vl) {
		switch (vl) {
			case usingExtension[0]:
				{
					if (param.anisotropic) {
						sys.anisotropic = { param: param.anisotropic, filter: gl.getExtension("EXT_texture_filter_anisotropic") }
					};
				}; break;
			case usingExtension[1]:
				{
					gl.getExtension("OES_standard_derivatives");
				}; break;
			case usingExtension[2]:
				{
					sys.drawBuffer = gl.getExtension("WEBGL_draw_buffers");
				}; break;
			case usingExtension[3]:
				{
					gl.getExtension("OES_element_index_uint");
				}; break;
			case usingExtension[4]:
				{
					gl.getExtension("OES_texture_float");
				}; break;
			case usingExtension[5]:
				{
					gl.getExtension("OES_texture_float_linear");
				}; break;
			case usingExtension[6]:
				{
					sys.halfTexture = gl.getExtension("OES_texture_half_float");
				}; break;
			case usingExtension[7]:
				{
					gl.getExtension("OES_texture_half_float_linear");
				}; break;
			case usingExtension[8]:
				{
					gl.getExtension("WEBKIT_WEBGL_depth_texture");
				}; break;
		}
	});
	var w = window.innerWidth, h = window.innerHeight;
	canvas.width = w; canvas.height = h;
	this.width = w; this.height = h;
	sys.wh = w / h;
	sys.constructorWebglBuffer = gl.createBuffer().constructor;
	var mouse = {
		click: function () { },
		wheel: function () { },
		mouseDrag: function () { },
		mouseDown: function () { },
		mouseMove: function () { },

		_init: function () {
			var k_x = 2 / window.innerWidth, k_y = 2 / window.innerHeight;
			canvas.onmousewheel = function (ev) { var delta = ev.deltaY || ev.detail || ev.wheelDelta; ev.preventDefault(); mouse.wheel({ wheel: delta }); }
			canvas.onmousedown = function (ev) {
				canvas.oncontextmenu = function (e) { e.preventDefault(); }
				ev.preventDefault();
				var wh; switch (ev.which) { case 1: { wh = "LEFT" }; break; case 2: { wh = "AVERAGE" }; break; case 3: { wh = "RIGHT" }; break; default: { wh = "NULL" } }; mouse.click({ pageX: ev.pageX, pageY: ev.pageY, oneMoneX: ev.clientX * k_x - 1, oneMoneY: 1 - ev.clientY * k_y, click: wh });
				var old_x = ev.pageX, old_y = ev.pageY,
				delta_x = 0, delta_y = 0;
				canvas.onmousemove = function (ee) {
					delta_x = (ee.pageX - old_x); delta_y = (ee.pageY - old_y);
					old_x += delta_x; old_y += delta_y;
					mouse.mouseDrag({ deltaX: delta_x, deltaY: delta_y, which: wh, oneMoneX: ev.clientX * k_x - 1, oneMoneY: 1 - ev.clientY * k_y });
				};
				canvas.onmouseup = function () {
					canvas.onmousemove = function (ev) {
						var delta_x = (ev.pageX - old_x_move); var delta_y = (ev.pageY - old_y_move);
						old_x_move += delta_x; old_y_move += delta_y;
						mouse.mouseMove({ deltaX: delta_x, deltaY: delta_y });
					};
				};
			};
			var old_x_move = 0, old_y_move = 0;
			canvas.onmousemove = function (ev) {
				var delta_x = (ev.pageX - old_x_move); var delta_y = (ev.pageY - old_y_move);
				old_x_move += delta_x; old_y_move += delta_y;
				mouse.mouseMove({ deltaX: delta_x, deltaY: delta_y });
			}
		}
	}; this.mouse = mouse; mouse._init();
	function getChar(event) { return String.fromCharCode(event.keyCode || event.charCode); }
	var keyboard =	{
		keyUp: function () { },
		keyDown: function () { },
		mas: [],
		_init: function () {
			var alphawit = ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "A", "S", "D", "F", "G", "H", "J", "K", "L", "Z", "X", "C", "V", "B", "N", "M"];
			var mas = [];
			alphawit.forEach(function (a) {
				mas[a] = false;
			})
			document.body.onkeydown = function (e) {
				//event.preventDefault();
				if (mas[getChar(e)] == false) keyboard.keyDown(getChar(e))
				mas[getChar(e)] = true;
			};
			document.body.onkeyup = function (e) {
				//event.preventDefault();
				if (mas[getChar(e)] == true) keyboard.keyUp(getChar(e))
				mas[getChar(e)] = false;
			};
		}
	}; this.keyboard = keyboard; keyboard._init();
	this.getJson = function (url, func) {
		var xmlHttp = new XMLHttpRequest(); xmlHttp.open("GET", url, true); xmlHttp.onreadystatechange = function ()
		{ if (xmlHttp.readyState === 4 && xmlHttp.status === 200) { func(JSON.parse(xmlHttp.responseText)); } }; xmlHttp.send();
	}
	sys.plane = {
		vertex: [1, 0, -1, 1, 0, 1, -1, 0, 1, -1, 0, -1],
		index: [0, 1, 2, 3, 0, 2],
		normal: [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
		uv: [0.9999, 0.0001, 0.9999, 0.9999, 0.0001, 0.9999, 0.0001, 0.0001]

	};
	sys.pPlane = {
		vertex: [1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0],
		normal: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		index: [0, 1, 2, 3, 0, 2]
	};
	sys.cube = {
		vertex: [1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1],
		index: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23],
		normal: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0]
	};
	sys.sphere = {
		vertex: [-0.7071, 0.7071, 0, -0.6935, 0.7071, 0.1379, -0.8155, 0.5556, 0.1622, -0.7071, -0.7071, 0, -0.6935, -0.7071, 0.1379, -0.5449, -0.8315, 0.1084, -0.8315, 0.5556, 0, -0.9061, 0.3827, 0.1802, -0.5556, -0.8315, 0, -0.3753, -0.9239, 0.0747, -0.9239, 0.3827, 0, -0.9619, 0.1951, 0.1913, -0.3827, -0.9239, 0, -0.1913, -0.9808, 0.0381, -0.9808, 0.1951, 0, -0.9808, 0, 0.1951, -1, 0, 0, -0.9619, -0.1951, 0.1913, -0.1951, 0.9808, 0, -0.1913, 0.9808, 0.0381, -0.3753, 0.9239, 0.0747, -0.9239, -0.3827, 0, -0.9808, -0.1951, 0, -0.5556, 0.8315, 0, -0.3827, 0.9239, 0, -0.9061, -0.3827, 0.1802, -0.8155, -0.5556, 0.1622, -0.5449, 0.8315, 0.1084, -0.8315, -0.5556, 0, -0.5133, 0.8315, 0.2126, -0.6533, 0.7071, 0.2706, -0.7682, -0.5556, 0.3182, -0.7682, 0.5556, 0.3182, -0.6533, -0.7071, 0.2706, -0.5133, -0.8315, 0.2126, -0.8536, 0.3827, 0.3536, -0.5449, -0.8315, 0.1084, -0.5133, -0.8315, 0.2126, -0.3536, -0.9239, 0.1464, -0.9061, 0.1951, 0.3753, -0.3753, -0.9239, 0.0747, -0.1802, -0.9808, 0.0747, -0.9239, 0, 0.3827, -0.1802, 0.9808, 0.0747, -0.3536, 0.9239, 0.1464, -0.9061, -0.1951, 0.3753, -0.8536, -0.3827, 0.3536, -0.9061, 0.1951, 0.3753, -0.8155, 0.1951, 0.5449, -0.8315, 0, 0.5556, -0.9239, 0, 0.3827, -0.8155, -0.1951, 0.5449, -0.1622, 0.9808, 0.1084, -0.3182, 0.9239, 0.2126, -0.9061, -0.1951, 0.3753, -0.7682, -0.3827, 0.5133, -0.4619, 0.8315, 0.3087, -0.7682, -0.5556, 0.3182, -0.8536, -0.3827, 0.3536, -0.5133, 0.8315, 0.2126, -0.5879, 0.7071, 0.3928, -0.6533, -0.7071, 0.2706, -0.7682, -0.5556, 0.3182, -0.6913, -0.5556, 0.4619, -0.6533, 0.7071, 0.2706, -0.6913, 0.5556, 0.4619, -0.6533, -0.7071, 0.2706, -0.5879, -0.7071, 0.3928, -0.4619, -0.8315, 0.3087, -0.7682, 0.5556, 0.3182, -0.7682, 0.3827, 0.5133, -0.5133, -0.8315, 0.2126, -0.3182, -0.9239, 0.2126, -0.9061, 0.1951, 0.3753, -0.8536, 0.3827, 0.3536, -0.1622, -0.9808, 0.1084, -0.5879, -0.5556, 0.5879, -0.5, -0.7071, 0.5, -0.5, 0.7071, 0.5, -0.5879, 0.5556, 0.5879, -0.3928, -0.8315, 0.3928, -0.6533, 0.3827, 0.6533, -0.2706, -0.9239, 0.2706, -0.6935, 0.1951, 0.6935, -0.1379, -0.9808, 0.1379, -0.7071, 0, 0.7071, -0.6935, -0.1951, 0.6935, -0.1379, 0.9808, 0.1379, -0.2706, 0.9239, 0.2706, -0.6533, -0.3827, 0.6533, -0.3928, 0.8315, 0.3928, -0.5556, 0, 0.8315, -0.5449, -0.1951, 0.8155, -0.1084, 0.9808, 0.1622, -0.2126, 0.9239, 0.3182, -0.5133, -0.3827, 0.7682, -0.3087, 0.8315, 0.4619, -0.3928, 0.7071, 0.5879, -0.4619, -0.5556, 0.6913, -0.3928, -0.7071, 0.5879, -0.4619, 0.5556, 0.6913, -0.5133, 0.3827, 0.7682, -0.3087, -0.8315, 0.4619, -0.5449, 0.1951, 0.8155, -0.2126, -0.9239, 0.3182, -0.1084, -0.9808, 0.1622, -0.2706, 0.7071, 0.6533, -0.2706, -0.7071, 0.6533, -0.2126, -0.8315, 0.5133, -0.3182, 0.5556, 0.7682, -0.3536, 0.3827, 0.8536, -0.1464, -0.9239, 0.3536, -0.0747, -0.9808, 0.1802, -0.3753, 0.1951, 0.9061, -0.3827, 0, 0.9239, -0.3753, -0.1951, 0.9061, -0.0747, 0.9808, 0.1802, -0.1464, 0.9239, 0.3536, -0.3536, -0.3827, 0.8536, -0.2126, 0.8315, 0.5133, -0.3182, -0.5556, 0.7682, -0.1951, 0, 0.9808, -0.1913, -0.1951, 0.9619, -0.0381, 0.9808, 0.1913, -0.0747, 0.9239, 0.3753, -0.1802, -0.3827, 0.9061, -0.1084, 0.8315, 0.5449, -0.1622, -0.5556, 0.8155, -0.1379, 0.7071, 0.6935, -0.1622, 0.5556, 0.8155, -0.1379, -0.7071, 0.6935, -0.1084, -0.8315, 0.5449, -0.1802, 0.3827, 0.9061, -0.0747, -0.9239, 0.3753, -0.1913, 0.1951, 0.9619, 0, -0.7071, 0.7071, 0, 0.5556, 0.8315, 0, 0.3827, 0.9239, 0, -0.8315, 0.5556, -0.0381, -0.9808, 0.1913, 0, -0.9239, 0.3827, 0, 0.1951, 0.9808, 0, 0, 1, 0, 0.9808, 0.1951, 0, 0.9239, 0.3827, 0, -0.1951, 0.9808, 0, -0.3827, 0.9239, 0, 0.8315, 0.5556, 0, 0.7071, 0.7071, 0, -0.5556, 0.8315, 0.1913, -0.1951, 0.9619, 0.1802, -0.3827, 0.9061, 0.0747, 0.9239, 0.3753, 0.1084, 0.8315, 0.5449, 0.138, 0.7071, 0.6935, 0.1622, -0.5556, 0.8155, 0.138, -0.7071, 0.6935, 0.1622, 0.5556, 0.8155, 0.1802, 0.3827, 0.9061, 0.1084, -0.8315, 0.5449, 0.0747, -0.9239, 0.3753, 0, -0.9808, 0.1951, 0.1913, 0.1951, 0.9619, 0.1951, 0, 0.9808, 0.0381, 0.9808, 0.1913, 0.2126, -0.8315, 0.5133, 0.3536, 0.3827, 0.8536, 0.1464, -0.9239, 0.3536, 0.0747, -0.9808, 0.1802, 0.3753, 0.1951, 0.9061, 0.3827, 0, 0.9239, 0.3753, -0.1951, 0.9061, 0.0747, 0.9808, 0.1802, 0.1464, 0.9239, 0.3536, 0.3536, -0.3827, 0.8536, 0.2126, 0.8315, 0.5133, 0.2706, 0.7071, 0.6533, 0.3182, -0.5556, 0.7682, 0.2706, -0.7071, 0.6533, 0.3182, 0.5556, 0.7682, 0.2126, 0.9239, 0.3182, 0.3087, 0.8315, 0.4619, 0.5133, -0.3827, 0.7682, 0.3928, 0.7071, 0.5879, 0.4619, -0.5556, 0.6913, 0.3928, -0.7071, 0.5879, 0.4619, 0.5556, 0.6913, 0.5133, 0.3827, 0.7682, 0.3087, -0.8315, 0.4619, 0.2126, -0.9239, 0.3182, 0.1084, -0.9808, 0.1622, 0.5449, 0.1951, 0.8155, 0.5556, 0, 0.8315, 0.1084, 0.9808, 0.1622, 0.5449, -0.1951, 0.8155, 0.6533, 0.3827, 0.6533, 0.2706, -0.9239, 0.2706, 0.6935, 0.1951, 0.6935, 0.7071, 0, 0.7071, 0.6935, -0.1951, 0.6935, 0.138, 0.9808, 0.1379, 0.2706, 0.9239, 0.2706, 0.6533, -0.3827, 0.6533, 0.3928, 0.8315, 0.3928, 0.5879, -0.5556, 0.5879, 0.5, 0.7071, 0.5, 0.5, -0.7071, 0.5, 0.5879, 0.5556, 0.5879, 0.3928, -0.8315, 0.3928, 0.7682, -0.3827, 0.5133, 0.4619, 0.8315, 0.3087, 0.6913, -0.5556, 0.4619, 0.5879, -0.7071, 0.3928, 0.5879, 0.7071, 0.3928, 0.6913, 0.5556, 0.4619, 0.7682, 0.3827, 0.5133, 0.4619, -0.8315, 0.3087, 0.3182, -0.9239, 0.2126, 0.138, -0.9808, 0.1379, 0.8155, 0.1951, 0.5449, 0.8315, 0, 0.5556, 0.1622, 0.9808, 0.1084, 0.3182, 0.9239, 0.2126, 0.8155, -0.1951, 0.5449, 0.3536, -0.9239, 0.1464, 0.1802, -0.9808, 0.0747, 0.9061, 0.1951, 0.3753, 0.9239, 0, 0.3827, 0.9061, -0.1951, 0.3753, 0.1802, 0.9808, 0.0747, 0.3536, 0.9239, 0.1464, 0.8536, -0.3827, 0.3536, 0.5133, 0.8315, 0.2126, 0.6533, 0.7071, 0.2706, 0.7682, -0.5556, 0.3182, 0.6533, -0.7071, 0.2706, 0.7682, 0.5556, 0.3182, 0.8536, 0.3827, 0.3536, 0.5133, -0.8315, 0.2126, 0.5449, 0.8315, 0.1084, 0.6935, 0.7071, 0.1379, 0.8155, -0.5556, 0.1622, 0.6935, -0.7071, 0.1379, 0.8155, 0.5556, 0.1622, 0.5449, -0.8315, 0.1084, 0.9061, 0.3827, 0.1802, 0.3753, -0.9239, 0.0747, 0.9619, 0.1951, 0.1913, 0.9808, 0, 0.1951, 0.9619, -0.1951, 0.1913, 0.1913, 0.9808, 0.0381, 0.3753, 0.9239, 0.0747, 0.9061, -0.3827, 0.1802, 0.9808, 0.1951, 0, 1, 0, 0, 0.9808, -0.1951, 0, 0.1951, 0.9808, 0, 0.3827, 0.9239, 0, 0.9239, -0.3827, 0, 0.5556, 0.8315, 0, 0.8315, -0.5556, 0, 0.7071, -0.7071, 0, 0.7071, 0.7071, 0, 0.8315, 0.5556, 0, 0.9239, 0.3827, 0, 0.5556, -0.8315, 0, 0.3827, -0.9239, 0, 0.1913, -0.9808, 0.0381, 0.8155, -0.5556, -0.1622, 0.6935, -0.7071, -0.1379, 0.6935, 0.7071, -0.1379, 0.5449, -0.8315, -0.1084, 0.8155, 0.5556, -0.1622, 0.9061, 0.3827, -0.1802, 0.3753, -0.9239, -0.0747, 0.1913, -0.9808, -0.0381, 0.9619, 0.1951, -0.1913, 0.9808, 0, -0.1951, 0.9619, -0.1951, -0.1913, 0.1913, 0.9808, -0.0381, 0.3753, 0.9239, -0.0747, 0.9061, -0.3827, -0.1802, 0.5449, 0.8315, -0.1084, 0.9239, 0, -0.3827, 0.1802, 0.9808, -0.0747, 0.3536, 0.9239, -0.1464, 0.9061, -0.1951, -0.3753, 0.8536, -0.3827, -0.3536, 0.5133, 0.8315, -0.2126, 0.7682, -0.5556, -0.3182, 0.6533, -0.7071, -0.2706, 0.6533, 0.7071, -0.2706, 0.5133, -0.8315, -0.2126, 0.7682, 0.5556, -0.3182, 0.8536, 0.3827, -0.3536, 0.3536, -0.9239, -0.1464, 0.9061, 0.1951, -0.3753, 0.5879, -0.7071, -0.3928, 0.6913, 0.5556, -0.4619, 0.7682, 0.3827, -0.5133, 0.4619, -0.8315, -0.3087, 0.3182, -0.9239, -0.2126, 0.1802, -0.9808, -0.0747, 0.8155, 0.1951, -0.5449, 0.8315, 0, -0.5556, 0.8155, -0.1951, -0.5449, 0.1622, 0.9808, -0.1084, 0.3182, 0.9239, -0.2126, 0.7682, -0.3827, -0.5133, 0.4619, 0.8315, -0.3087, 0.5879, 0.7071, -0.3928, 0.6913, -0.5556, -0.4619, 0.138, 0.9808, -0.1379, 0.2706, 0.9239, -0.2706, 0.6935, -0.1951, -0.6935, 0.6533, -0.3827, -0.6533, 0.3928, 0.8315, -0.3928, 0.5879, -0.5556, -0.5879, 0.5, -0.7071, -0.5, 0.5, 0.7071, -0.5, 0.3928, -0.8315, -0.3928, 0.5879, 0.5556, -0.5879, 0.6533, 0.3827, -0.6533, 0.4619, -0.8315, -0.3087, 0.2706, -0.9239, -0.2706, 0.3182, -0.9239, -0.2126, 0.1379, -0.9808, -0.1379, 0.6935, 0.1951, -0.6935, 0.7071, 0, -0.7071, 0.4619, 0.5556, -0.6913, 0.5133, 0.3827, -0.7682, 0.3087, -0.8315, -0.4619, 0.2126, -0.9239, -0.3182, 0.1084, -0.9808, -0.1622, 0.5449, 0.1951, -0.8155, 0.5556, 0, -0.8315, 0.5449, -0.1951, -0.8155, 0.1084, 0.9808, -0.1622, 0.2126, 0.9239, -0.3182, 0.5133, -0.3827, -0.7682, 0.3087, 0.8315, -0.4619, 0.4619, -0.5556, -0.6913, 0.3928, -0.7071, -0.5879, 0.3928, 0.7071, -0.5879, 0.3753, -0.1951, -0.9061, 0.3536, -0.3827, -0.8536, 0.1464, 0.9239, -0.3536, 0.2126, 0.8315, -0.5133, 0.3182, -0.5556, -0.7682, 0.2706, 0.7071, -0.6533, 0.2706, -0.7071, -0.6533, 0.2126, -0.8315, -0.5133, 0.3182, 0.5556, -0.7682, 0.3536, 0.3827, -0.8536, 0.1464, -0.9239, -0.3536, 0.3753, 0.1951, -0.9061, 0.3827, 0, -0.9239, 0.0747, 0.9808, -0.1802, 0.1084, -0.8315, -0.5449, 0.1802, 0.3827, -0.9061, 0.0747, -0.9239, -0.3753, 0.0381, -0.9808, -0.1913, 0.1913, 0.1951, -0.9619, 0.1951, 0, -0.9808, 0.1913, -0.1951, -0.9619, 0.0381, 0.9808, -0.1913, 0.1802, -0.3827, -0.9061, 0.0747, 0.9239, -0.3753, 0.1084, 0.8315, -0.5449, 0.1622, -0.5556, -0.8155, 0.1379, -0.7071, -0.6935, 0.1379, 0.7071, -0.6935, 0.1622, 0.5556, -0.8155, 0, 0.9239, -0.3827, 0, 0.8315, -0.5556, 0, -0.3827, -0.9239, 0, -0.5556, -0.8315, 0, -0.7071, -0.7071, 0, 0.7071, -0.7071, 0, 0.5556, -0.8315, 0, 0.3827, -0.9239, 0, -0.8315, -0.5556, 0, -0.9239, -0.3827, 0, -0.9808, -0.1951, 0, 0.1951, -0.9808, 0, 0, -1, 0, 0.9808, -0.1951, 0, -0.1951, -0.9808, -0.1802, 0.3827, -0.9061, -0.0747, -0.9239, -0.3753, -0.0381, -0.9808, -0.1913, -0.1913, 0.1951, -0.9619, -0.1951, 0, -0.9808, -0.0381, 0.9808, -0.1913, -0.1913, -0.1951, -0.9619, -0.1802, -0.3827, -0.9061, -0.0747, 0.9239, -0.3753, -0.1084, 0.8315, -0.5449, -0.1622, -0.5556, -0.8155, -0.1379, -0.7071, -0.6935, -0.1379, 0.7071, -0.6935, -0.1084, -0.8315, -0.5449, -0.1622, 0.5556, -0.8155, -0.3536, -0.3827, -0.8536, -0.2126, 0.8315, -0.5133, -0.3182, -0.5556, -0.7682, -0.2706, -0.7071, -0.6533, -0.2706, 0.7071, -0.6533, -0.3182, 0.5556, -0.7682, -0.2126, -0.8315, -0.5133, -0.3536, 0.3827, -0.8536, -0.1464, -0.9239, -0.3536, -0.0747, -0.9808, -0.1802, -0.3753, 0.1951, -0.9061, -0.3827, 0, -0.9239, -0.3753, -0.1951, -0.9061, -0.0747, 0.9808, -0.1802, -0.1464, 0.9239, -0.3536, -0.2126, -0.9239, -0.3182, -0.1084, -0.9808, -0.1622, -0.5449, 0.1951, -0.8155, -0.5556, 0, -0.8315, -0.1084, 0.9808, -0.1622, -0.2126, 0.9239, -0.3182, -0.5449, -0.1951, -0.8155, -0.5133, -0.3827, -0.7682, -0.3087, 0.8315, -0.4619, -0.4619, -0.5556, -0.6913, -0.3928, -0.7071, -0.5879, -0.3928, 0.7071, -0.5879, -0.3087, -0.8315, -0.4619, -0.4619, 0.5556, -0.6913, -0.5133, 0.3827, -0.7682, -0.5879, -0.5556, -0.5879, -0.5, -0.7071, -0.5, -0.5, 0.7071, -0.5, -0.3928, -0.8315, -0.3928, -0.5879, 0.5556, -0.5879, -0.6533, 0.3827, -0.6533, -0.2706, -0.9239, -0.2706, -0.1379, -0.9808, -0.1379, -0.6935, 0.1951, -0.6935, -0.7071, 0, -0.7071, -0.1379, 0.9808, -0.1379, -0.2706, 0.9239, -0.2706, -0.6935, -0.1951, -0.6935, -0.6533, -0.3827, -0.6533, -0.3928, 0.8315, -0.3928, -0.8315, 0, -0.5556, -0.8155, -0.1951, -0.5449, -0.1622, 0.9808, -0.1084, -0.3182, 0.9239, -0.2126, -0.7682, -0.3827, -0.5133, -0.4619, 0.8315, -0.3087, -0.5879, 0.7071, -0.3928, -0.6913, -0.5556, -0.4619, -0.5879, -0.7071, -0.3928, -0.6913, 0.5556, -0.4619, -0.7682, 0.3827, -0.5133, -0.4619, -0.8315, -0.3087, -0.3182, -0.9239, -0.2126, -0.1622, -0.9808, -0.1084, -0.8155, 0.1951, -0.5449, -0.6533, 0.7071, -0.2706, -0.6533, -0.7071, -0.2706, -0.5133, -0.8315, -0.2126, -0.7682, 0.5556, -0.3182, -0.8536, 0.3827, -0.3536, -0.3536, -0.9239, -0.1464, -0.1802, -0.9808, -0.0747, -0.9061, 0.1951, -0.3753, -0.9239, 0, -0.3827, -0.9061, -0.1951, -0.3753, -0.1802, 0.9808, -0.0747, -0.8536, -0.3827, -0.3536, -0.3536, 0.9239, -0.1464, -0.5133, 0.8315, -0.2126, -0.7682, -0.5556, -0.3182, -0.9808, 0, -0.1951, -0.9619, -0.1951, -0.1913, -0.1913, 0.9808, -0.0381, -0.3753, 0.9239, -0.0747, -0.9061, -0.3827, -0.1802, -0.5449, 0.8315, -0.1084, -0.6935, 0.7071, -0.1379, -0.8155, -0.5556, -0.1622, -0.6935, -0.7071, -0.1379, -0.5449, -0.8315, -0.1084, -0.8155, 0.5556, -0.1622, -0.9061, 0.3827, -0.1802, -0.3753, -0.9239, -0.0747, -0.9619, 0.1951, -0.1913, 0, 1, 0, 0, -1, 0, -0.1951, -0.9808, 0, -0.1913, -0.9808, 0.0381, -0.1913, -0.9808, 0.0381, 0.0381, -0.9808, 0.1913, 0.1622, -0.9808, 0.1084, 0.1951, -0.9808, 0, 0.1622, -0.9808, -0.1084, 0.1379, -0.9808, -0.1379, 0.1379, -0.9808, -0.1379, 0.1084, -0.9808, -0.1622, 0.1084, -0.9808, -0.1622, 0.0747, -0.9808, -0.1802, 0.0381, -0.9808, -0.1913, 0.0381, -0.9808, -0.1913, 0, -0.9808, -0.1951, 0, -0.9808, -0.1951, -0.0381, -0.9808, -0.1913, -0.0381, -0.9808, -0.1913, -0.0747, -0.9808, -0.1802, -0.0747, -0.9808, -0.1802, -0.1084, -0.9808, -0.1622, -0.1084, -0.9808, -0.1622, -0.1379, -0.9808, -0.1379, -0.1379, -0.9808, -0.1379, -0.1622, -0.9808, -0.1084, -0.1622, -0.9808, -0.1084, -0.1802, -0.9808, -0.0747, -0.1802, -0.9808, -0.0747, -0.1913, -0.9808, -0.0381, -0.1951, -0.9808, 0, -0.1951, -0.9808, 0, -0.3753, -0.9239, 0.0747, -0.5449, -0.8315, 0.1084, -0.1913, -0.9808, 0.0381, -0.3753, -0.9239, 0.0747, -0.9239, 0, 0.3827, -0.9061, 0.1951, 0.3753, -0.9061, -0.1951, 0.3753, -0.9239, 0, 0.3827, -0.8536, -0.3827, 0.3536, -0.9061, -0.1951, 0.3753, -0.5133, 0.8315, 0.2126, -0.7682, -0.5556, 0.3182, -0.6533, 0.7071, 0.2706, -0.5133, 0.8315, 0.2126, -0.6533, -0.7071, 0.2706, -0.7682, 0.5556, 0.3182, -0.6533, 0.7071, 0.2706, -0.5133, -0.8315, 0.2126, -0.6533, -0.7071, 0.2706, -0.8536, 0.3827, 0.3536, -0.7682, 0.5556, 0.3182, -0.5133, -0.8315, 0.2126, -0.9061, 0.1951, 0.3753, 0.4619, -0.8315, -0.3087, 0.4619, -0.8315, -0.3087, 0.3182, -0.9239, -0.2126, 0.4619, -0.8315, -0.3087, 0.1622, -0.9808, -0.1084, 0.3182, -0.9239, -0.2126, 0.0747, -0.9808, -0.1802, 0.0747, -0.9808, -0.1802, -0.1913, -0.9808, -0.0381, -0.1913, -0.9808, -0.0381, -0.1951, -0.9808, 0],
		index: [0, 1, 2, 3, 4, 5, 6, 2, 7, 8, 5, 9, 10, 7, 11, 12, 9, 13, 14, 11, 15, 16, 15, 17, 18, 19, 20, 21, 22, 17, 23, 24, 20, 21, 25, 26, 23, 27, 1, 3, 28, 26, 27, 29, 30, 4, 26, 31, 1, 30, 32, 4, 33, 34, 2, 32, 35, 36, 37, 38, 7, 35, 39, 40, 38, 41, 11, 39, 42, 17, 15, 42, 19, 43, 44, 25, 17, 45, 20, 44, 29, 25, 46, 31, 47, 48, 49, 50, 49, 51, 43, 52, 53, 54, 51, 55, 44, 53, 56, 57, 58, 55, 59, 56, 60, 61, 62, 63, 64, 60, 65, 66, 67, 68, 69, 65, 70, 71, 68, 72, 73, 74, 70, 38, 72, 75, 63, 76, 77, 60, 78, 79, 67, 77, 80, 65, 79, 81, 68, 80, 82, 70, 81, 83, 72, 82, 84, 49, 48, 83, 49, 85, 86, 52, 87, 88, 51, 86, 89, 53, 88, 90, 63, 55, 89, 56, 90, 78, 85, 91, 92, 87, 93, 94, 86, 92, 95, 88, 94, 96, 76, 89, 95, 90, 96, 97, 76, 98, 99, 79, 78, 97, 80, 77, 99, 79, 100, 101, 82, 80, 102, 81, 101, 103, 82, 104, 105, 85, 83, 103, 100, 97, 106, 99, 107, 108, 100, 109, 110, 104, 102, 108, 103, 101, 110, 104, 111, 112, 103, 113, 114, 91, 114, 115, 93, 116, 117, 92, 115, 118, 94, 117, 119, 98, 95, 118, 96, 119, 106, 99, 98, 120, 114, 121, 122, 116, 123, 124, 115, 122, 125, 117, 124, 126, 120, 118, 125, 106, 119, 126, 107, 120, 127, 106, 128, 129, 107, 130, 131, 109, 129, 132, 108, 131, 133, 113, 110, 132, 112, 111, 133, 113, 134, 121, 131, 130, 135, 129, 136, 137, 133, 131, 138, 134, 132, 137, 139, 133, 140, 134, 141, 142, 122, 121, 142, 123, 143, 144, 122, 145, 146, 124, 144, 147, 127, 125, 146, 126, 147, 148, 127, 149, 135, 128, 148, 136, 145, 150, 151, 144, 152, 153, 149, 146, 151, 147, 153, 154, 149, 155, 156, 136, 148, 154, 138, 135, 156, 136, 157, 158, 138, 159, 160, 141, 137, 158, 161, 140, 160, 141, 162, 163, 142, 163, 150, 144, 143, 164, 160, 159, 165, 162, 158, 166, 160, 167, 168, 162, 169, 170, 163, 170, 171, 164, 172, 173, 150, 171, 174, 153, 152, 173, 155, 151, 174, 153, 175, 176, 155, 177, 178, 154, 176, 179, 156, 178, 165, 157, 179, 166, 173, 180, 181, 177, 174, 182, 175, 181, 183, 177, 184, 185, 179, 176, 183, 165, 178, 185, 179, 186, 187, 165, 188, 189, 169, 166, 187, 167, 189, 190, 169, 191, 192, 171, 170, 192, 172, 193, 180, 171, 194, 182, 191, 187, 195, 190, 189, 196, 191, 197, 198, 192, 198, 199, 193, 200, 201, 194, 199, 202, 180, 201, 203, 182, 202, 204, 181, 203, 205, 184, 204, 206, 183, 205, 207, 188, 185, 206, 186, 207, 195, 188, 208, 196, 204, 202, 209, 205, 203, 210, 204, 211, 212, 207, 205, 213, 208, 206, 212, 207, 214, 215, 208, 216, 217, 197, 195, 215, 218, 196, 217, 197, 219, 220, 199, 198, 220, 200, 221, 222, 199, 223, 209, 201, 222, 210, 217, 224, 225, 219, 226, 227, 220, 227, 228, 221, 229, 230, 223, 228, 231, 210, 222, 230, 211, 209, 231, 210, 232, 233, 211, 234, 235, 213, 233, 236, 216, 212, 235, 214, 236, 237, 216, 238, 224, 219, 215, 237, 232, 239, 240, 234, 241, 242, 233, 240, 243, 235, 242, 244, 236, 243, 245, 238, 244, 246, 226, 237, 245, 225, 224, 246, 226, 247, 248, 227, 248, 249, 229, 250, 251, 228, 249, 252, 230, 251, 239, 234, 231, 252, 247, 253, 254, 248, 254, 255, 250, 256, 257, 249, 255, 258, 239, 251, 257, 241, 252, 258, 240, 239, 259, 241, 260, 261, 240, 262, 263, 244, 242, 261, 243, 263, 264, 244, 265, 266, 247, 245, 264, 267, 246, 266, 260, 268, 269, 263, 262, 270, 261, 269, 271, 263, 272, 273, 265, 271, 274, 253, 264, 273, 266, 274, 275, 253, 276, 277, 254, 277, 278, 256, 279, 280, 255, 278, 281, 257, 280, 282, 260, 258, 281, 262, 259, 282, 278, 277, 283, 279, 284, 285, 278, 286, 287, 280, 285, 288, 268, 281, 287, 270, 282, 288, 268, 289, 290, 272, 270, 291, 269, 290, 292, 272, 293, 294, 274, 271, 292, 276, 273, 294, 275, 274, 295, 276, 296, 283, 292, 290, 297, 293, 298, 299, 292, 300, 301, 296, 294, 299, 302, 295, 301, 296, 303, 304, 283, 304, 305, 284, 306, 307, 286, 305, 308, 285, 307, 309, 289, 287, 308, 288, 309, 310, 289, 311, 297, 293, 291, 310, 306, 312, 313, 305, 314, 315, 307, 313, 316, 311, 308, 315, 310, 309, 316, 311, 317, 318, 298, 310, 319, 297, 318, 320, 298, 321, 322, 323, 320, 324, 303, 299, 322, 325, 324, 326, 304, 303, 327, 304, 328, 314, 321, 329, 330, 324, 320, 331, 327, 322, 330, 324, 332, 333, 327, 334, 335, 328, 335, 336, 312, 337, 338, 314, 336, 339, 313, 338, 340, 317, 315, 339, 319, 316, 340, 317, 341, 342, 321, 319, 343, 318, 342, 331, 336, 344, 345, 338, 346, 347, 341, 339, 345, 343, 340, 347, 342, 341, 348, 329, 343, 349, 342, 350, 351, 329, 352, 353, 332, 331, 351, 334, 330, 353, 333, 332, 354, 334, 355, 356, 335, 356, 344, 337, 357, 346, 354, 351, 358, 355, 353, 359, 354, 360, 361, 355, 362, 363, 356, 363, 364, 346, 357, 365, 344, 364, 366, 346, 367, 368, 348, 345, 366, 349, 347, 368, 348, 369, 370, 352, 349, 371, 350, 370, 358, 352, 372, 359, 367, 373, 374, 369, 366, 375, 371, 368, 374, 369, 376, 377, 371, 378, 379, 358, 370, 377, 372, 379, 380, 360, 358, 381, 362, 359, 380, 360, 382, 383, 362, 384, 385, 364, 363, 385, 367, 365, 386, 364, 387, 375, 384, 380, 388, 382, 389, 390, 384, 391, 392, 387, 385, 392, 373, 386, 393, 387, 394, 395, 373, 396, 397, 376, 375, 395, 378, 374, 397, 376, 398, 399, 379, 378, 400, 377, 399, 401, 379, 402, 388, 382, 381, 401, 398, 395, 403, 400, 397, 404, 398, 405, 406, 400, 407, 408, 399, 406, 409, 402, 408, 410, 389, 401, 409, 391, 388, 410, 389, 411, 412, 391, 413, 414, 392, 414, 415, 393, 416, 417, 394, 415, 403, 396, 417, 404, 411, 418, 419, 413, 420, 421, 415, 414, 421, 416, 422, 423, 415, 424, 425, 404, 417, 423, 405, 403, 425, 407, 404, 426, 405, 427, 428, 408, 407, 429, 406, 428, 430, 408, 431, 432, 411, 409, 430, 413, 410, 432, 427, 433, 434, 431, 429, 435, 428, 434, 436, 431, 437, 438, 430, 436, 439, 420, 432, 438, 418, 439, 440, 420, 441, 442, 424, 421, 442, 422, 443, 444, 424, 445, 446, 423, 444, 447, 427, 425, 446, 426, 447, 435, 442, 448, 449, 443, 450, 451, 445, 449, 452, 444, 451, 453, 433, 446, 452, 447, 453, 454, 433, 455, 456, 437, 435, 454, 436, 434, 456, 437, 457, 458, 436, 459, 460, 441, 438, 458, 439, 460, 461, 442, 441, 462, 457, 454, 463, 456, 464, 465, 457, 466, 467, 459, 465, 468, 462, 458, 467, 460, 468, 469, 462, 470, 471, 448, 471, 472, 451, 450, 473, 449, 472, 474, 453, 451, 475, 455, 452, 474, 454, 453, 476, 455, 477, 464, 471, 478, 479, 473, 480, 481, 472, 479, 482, 475, 481, 483, 477, 474, 482, 476, 483, 484, 477, 485, 486, 466, 463, 484, 464, 486, 487, 466, 488, 489, 465, 487, 490, 470, 467, 489, 469, 468, 490, 470, 491, 478, 18, 492, 19, 493, 494, 495, 19, 492, 43, 493, 496, 41, 43, 492, 52, 493, 41, 75, 52, 492, 87, 493, 75, 84, 87, 492, 93, 493, 84, 105, 93, 492, 116, 493, 105, 112, 116, 492, 123, 493, 112, 139, 123, 492, 143, 493, 139, 161, 143, 492, 164, 493, 161, 497, 164, 492, 172, 493, 497, 168, 172, 492, 193, 493, 168, 190, 193, 492, 200, 493, 190, 218, 200, 492, 221, 493, 218, 498, 221, 492, 229, 493, 498, 225, 229, 492, 250, 493, 225, 267, 250, 492, 256, 493, 267, 499, 256, 492, 279, 493, 499, 275, 493, 275, 302, 279, 492, 284, 284, 492, 306, 493, 302, 500, 306, 492, 312, 493, 500, 501, 312, 492, 337, 493, 502, 503, 337, 492, 357, 493, 504, 505, 357, 492, 365, 493, 505, 506, 365, 492, 386, 493, 507, 508, 386, 492, 393, 493, 509, 510, 393, 492, 416, 493, 511, 512, 416, 492, 422, 493, 513, 514, 422, 492, 443, 493, 515, 516, 443, 492, 450, 493, 517, 518, 450, 492, 473, 493, 519, 520, 473, 492, 480, 493, 521, 522, 486, 3, 8, 489, 488, 6, 487, 8, 12, 491, 489, 10, 490, 12, 523, 478, 491, 14, 480, 492, 18, 493, 522, 494, 478, 16, 22, 481, 480, 18, 479, 22, 21, 483, 481, 24, 482, 21, 28, 484, 483, 23, 485, 28, 3, 488, 484, 0, 6, 0, 2, 8, 3, 5, 10, 6, 7, 12, 8, 9, 14, 10, 11, 524, 12, 13, 16, 14, 15, 22, 16, 17, 24, 18, 20, 25, 21, 17, 27, 23, 20, 28, 21, 26, 0, 23, 1, 4, 3, 26, 1, 27, 30, 33, 4, 31, 2, 1, 32, 5, 4, 34, 7, 2, 35, 525, 526, 38, 11, 7, 39, 527, 528, 41, 15, 11, 42, 45, 17, 42, 20, 19, 44, 46, 25, 45, 27, 20, 29, 26, 25, 31, 529, 530, 49, 531, 532, 51, 44, 43, 53, 533, 534, 55, 535, 44, 56, 63, 536, 55, 537, 538, 60, 67, 539, 63, 540, 541, 65, 542, 543, 68, 544, 545, 70, 38, 546, 72, 48, 547, 70, 41, 38, 75, 67, 63, 77, 65, 60, 79, 68, 67, 80, 70, 65, 81, 72, 68, 82, 48, 70, 83, 75, 72, 84, 85, 49, 83, 51, 49, 86, 53, 52, 88, 55, 51, 89, 56, 53, 90, 76, 63, 89, 60, 56, 78, 86, 85, 92, 88, 87, 94, 89, 86, 95, 90, 88, 96, 98, 76, 95, 78, 90, 97, 77, 76, 99, 100, 79, 97, 102, 80, 99, 81, 79, 101, 104, 82, 102, 83, 81, 103, 84, 82, 105, 91, 85, 103, 109, 100, 106, 102, 99, 108, 101, 100, 110, 111, 104, 108, 113, 103, 110, 105, 104, 112, 91, 103, 114, 92, 91, 115, 94, 93, 117, 95, 92, 118, 96, 94, 119, 120, 98, 118, 97, 96, 106, 107, 99, 120, 115, 114, 122, 117, 116, 124, 118, 115, 125, 119, 117, 126, 127, 120, 125, 128, 106, 126, 130, 107, 127, 109, 106, 129, 108, 107, 131, 110, 109, 132, 111, 108, 133, 134, 113, 132, 139, 112, 133, 114, 113, 121, 138, 131, 135, 132, 129, 137, 140, 133, 138, 141, 134, 137, 161, 139, 140, 121, 134, 142, 145, 122, 142, 124, 123, 144, 125, 122, 146, 126, 124, 147, 149, 127, 146, 128, 126, 148, 130, 127, 135, 129, 128, 136, 146, 145, 151, 147, 144, 153, 155, 149, 151, 148, 147, 154, 135, 149, 156, 157, 136, 154, 159, 138, 156, 137, 136, 158, 140, 138, 160, 162, 141, 158, 497, 161, 160, 142, 141, 163, 145, 142, 150, 152, 144, 164, 167, 160, 165, 169, 162, 166, 497, 160, 168, 163, 162, 170, 150, 163, 171, 152, 164, 173, 151, 150, 174, 175, 153, 173, 177, 155, 174, 154, 153, 176, 156, 155, 178, 157, 154, 179, 159, 156, 165, 158, 157, 166, 175, 173, 181, 184, 177, 182, 176, 175, 183, 178, 177, 185, 186, 179, 183, 188, 165, 185, 166, 179, 187, 167, 165, 189, 191, 169, 187, 168, 167, 190, 170, 169, 192, 194, 171, 192, 173, 172, 180, 174, 171, 182, 197, 191, 195, 218, 190, 196, 192, 191, 198, 194, 192, 199, 180, 193, 201, 182, 194, 202, 181, 180, 203, 184, 182, 204, 183, 181, 205, 185, 184, 206, 186, 183, 207, 208, 188, 206, 187, 186, 195, 189, 188, 196, 211, 204, 209, 213, 205, 210, 206, 204, 212, 214, 207, 213, 216, 208, 212, 195, 207, 215, 196, 208, 217, 219, 197, 215, 498, 218, 217, 198, 197, 220, 223, 199, 220, 201, 200, 222, 202, 199, 209, 203, 201, 210, 498, 217, 225, 220, 219, 227, 223, 220, 228, 222, 221, 230, 209, 223, 231, 232, 210, 230, 234, 211, 231, 213, 210, 233, 212, 211, 235, 214, 213, 236, 238, 216, 235, 215, 214, 237, 217, 216, 224, 226, 219, 237, 233, 232, 240, 235, 234, 242, 236, 233, 243, 238, 235, 244, 237, 236, 245, 224, 238, 246, 247, 226, 245, 267, 225, 246, 227, 226, 248, 228, 227, 249, 230, 229, 251, 231, 228, 252, 232, 230, 239, 241, 234, 252, 248, 247, 254, 249, 248, 255, 251, 250, 257, 252, 249, 258, 259, 239, 257, 260, 241, 258, 262, 240, 259, 242, 241, 261, 243, 240, 263, 265, 244, 261, 245, 243, 264, 246, 244, 266, 253, 247, 264, 499, 267, 266, 261, 260, 269, 272, 263, 270, 265, 261, 271, 264, 263, 273, 266, 265, 274, 276, 253, 273, 499, 266, 275, 254, 253, 277, 255, 254, 278, 257, 256, 280, 258, 255, 281, 259, 257, 282, 268, 260, 281, 270, 262, 282, 286, 278, 283, 280, 279, 285, 281, 278, 287, 282, 280, 288, 289, 268, 287, 291, 270, 288, 269, 268, 290, 293, 272, 291, 271, 269, 292, 273, 272, 294, 295, 274, 292, 296, 276, 294, 302, 275, 295, 277, 276, 283, 548, 292, 297, 294, 293, 299, 295, 292, 301, 303, 296, 299, 500, 302, 301, 283, 296, 304, 286, 283, 305, 285, 284, 307, 287, 286, 308, 288, 285, 309, 311, 289, 308, 291, 288, 310, 290, 289, 297, 298, 293, 310, 307, 306, 313, 308, 305, 315, 309, 307, 316, 317, 311, 315, 319, 310, 316, 297, 311, 318, 321, 298, 319, 549, 297, 320, 299, 298, 322, 550, 551, 324, 327, 303, 322, 552, 553, 326, 328, 304, 327, 305, 304, 314, 322, 321, 330, 332, 324, 331, 334, 327, 330, 326, 324, 333, 328, 327, 335, 314, 328, 336, 313, 312, 338, 315, 314, 339, 316, 313, 340, 341, 317, 339, 343, 319, 340, 318, 317, 342, 329, 321, 343, 320, 318, 331, 339, 336, 345, 340, 338, 347, 348, 341, 345, 349, 343, 347, 350, 342, 348, 352, 329, 349, 331, 342, 351, 330, 329, 353, 354, 332, 351, 355, 334, 353, 554, 333, 354, 335, 334, 356, 336, 335, 344, 338, 337, 346, 360, 354, 358, 362, 355, 359, 555, 354, 361, 356, 355, 363, 344, 356, 364, 367, 346, 365, 345, 344, 366, 347, 346, 368, 369, 348, 366, 371, 349, 368, 350, 348, 370, 372, 352, 371, 351, 350, 358, 353, 352, 359, 368, 367, 374, 376, 369, 375, 378, 371, 374, 370, 369, 377, 372, 371, 379, 381, 358, 377, 359, 372, 380, 382, 360, 381, 384, 362, 380, 361, 360, 383, 363, 362, 385, 387, 364, 385, 373, 367, 386, 366, 364, 375, 391, 384, 388, 383, 382, 390, 385, 384, 392, 394, 387, 392, 396, 373, 393, 375, 387, 395, 374, 373, 397, 398, 376, 395, 400, 378, 397, 377, 376, 399, 402, 379, 400, 381, 377, 401, 380, 379, 388, 389, 382, 401, 405, 398, 403, 407, 400, 404, 399, 398, 406, 402, 400, 408, 401, 399, 409, 388, 402, 410, 411, 389, 409, 413, 391, 410, 390, 389, 412, 392, 391, 414, 394, 392, 415, 396, 393, 417, 395, 394, 403, 397, 396, 404, 412, 411, 419, 414, 413, 421, 424, 415, 421, 417, 416, 423, 403, 415, 425, 426, 404, 423, 427, 405, 425, 429, 407, 426, 406, 405, 428, 431, 408, 429, 409, 406, 430, 410, 408, 432, 418, 411, 430, 420, 413, 432, 428, 427, 434, 437, 431, 435, 430, 428, 436, 432, 431, 438, 418, 430, 439, 441, 420, 438, 419, 418, 440, 421, 420, 442, 445, 424, 442, 423, 422, 444, 425, 424, 446, 426, 423, 447, 433, 427, 446, 429, 426, 435, 445, 442, 449, 444, 443, 451, 446, 445, 452, 447, 444, 453, 455, 433, 452, 435, 447, 454, 434, 433, 456, 457, 437, 454, 459, 436, 456, 438, 437, 458, 439, 436, 460, 462, 441, 458, 440, 439, 461, 448, 442, 462, 466, 457, 463, 459, 456, 465, 458, 457, 467, 460, 459, 468, 470, 462, 467, 461, 460, 469, 448, 462, 471, 449, 448, 472, 475, 451, 473, 452, 449, 474, 476, 453, 475, 477, 455, 474, 463, 454, 476, 456, 455, 464, 472, 471, 479, 475, 473, 481, 474, 472, 482, 476, 475, 483, 485, 477, 482, 463, 476, 484, 464, 477, 486, 488, 466, 484, 465, 464, 487, 467, 466, 489, 468, 465, 490, 491, 470, 489, 556, 469, 490, 471, 470, 478, 487, 486, 8, 10, 489, 6, 490, 487, 12, 14, 491, 10, 557, 490, 558, 16, 478, 14, 479, 478, 22, 24, 481, 18, 482, 479, 21, 23, 483, 24, 485, 482, 28, 0, 484, 23, 486, 485, 3, 6, 488, 0],
		uv: [0.135, 0.8694, 0.0806, 0.8875, 0.0612, 0.8272, 0.0484, 0.3866, 0.0252, 0.3938, 0.021, 0.3317, 0.1078, 0.8124, 0.0512, 0.7659, 0.0409, 0.3256, 0.0156, 0.2698, 0.0923, 0.753, 0.0448, 0.7041, 0.0313, 0.2649, 0.008, 0.2082, 0.0819, 0.6925, 0.04, 0.6421, 0.0739, 0.6316, 0.036, 0.5801, 0.4485, 0.9055, 0.4666, 0.9121, 0.3565, 0.9601, 0.061, 0.5091, 0.0672, 0.5704, 0.196, 0.9185, 0.3339, 0.9373, 0.0324, 0.518, 0.0289, 0.4559, 0.1382, 0.9432, 0.0549, 0.4478, 0.0342, 0.9587, 0.0152, 0.8966, 0.0028, 0.4595, 0.0103, 0.8343, 0.002, 0.397, 0.001, 0.3345, 0.0079, 0.7718, 1.021, 0.3317, 1.001, 0.3345, 0.9998, 0.272, 0.0064, 0.7094, 1.0156, 0.2698, 0.9981, 0.2096, 0.0053, 0.6469, 0.4886, 0.9152, 0.4477, 0.9766, 0.0044, 0.5844, 0.0036, 0.5219, 1.0064, 0.7094, 0.9677, 0.7079, 0.9704, 0.6456, 1.0053, 0.6469, 0.9727, 0.5832, 0.5116, 0.9143, 0.5959, 0.9712, 1.0044, 0.5844, 0.9747, 0.5209, 0.905, 0.9539, 1.0028, 0.4595, 1.0036, 0.5219, 1.0342, 0.9587, 0.9465, 0.8941, 1.002, 0.397, 1.0028, 0.4595, 0.9766, 0.4585, 1.0152, 0.8966, 0.9582, 0.8323, 1.002, 0.397, 0.9787, 0.3961, 0.981, 0.3338, 1.0103, 0.8343, 0.964, 0.7702, 1.001, 0.3345, 0.984, 0.2714, 1.0064, 0.7094, 1.0079, 0.7718, 0.9882, 0.2092, 0.9505, 0.453, 0.9554, 0.3912, 0.8853, 0.8807, 0.9089, 0.8218, 0.9611, 0.3295, 0.9215, 0.7612, 0.9682, 0.2681, 0.9298, 0.6999, 0.9783, 0.2071, 0.936, 0.6383, 0.9412, 0.5766, 0.5322, 0.9096, 0.6478, 0.9507, 0.9459, 0.5148, 0.8238, 0.9333, 0.9026, 0.6255, 0.9104, 0.5648, 0.5482, 0.9018, 0.659, 0.9272, 0.9175, 0.504, 0.7773, 0.907, 0.8359, 0.8598, 0.9247, 0.4431, 0.9324, 0.3824, 0.8646, 0.8042, 0.8817, 0.7457, 0.9413, 0.3219, 0.8934, 0.6859, 0.9526, 0.262, 0.9687, 0.2033, 0.7964, 0.8347, 0.9095, 0.3698, 0.9216, 0.311, 0.8259, 0.7817, 0.8451, 0.7252, 0.9372, 0.2534, 0.9594, 0.1979, 0.8591, 0.667, 0.8704, 0.6079, 0.8803, 0.5485, 0.559, 0.8918, 0.6576, 0.9033, 0.8897, 0.4888, 0.7453, 0.8793, 0.8992, 0.4292, 0.8397, 0.5865, 0.8512, 0.5282, 0.565, 0.8804, 0.6509, 0.8798, 0.8624, 0.4698, 0.7198, 0.8516, 0.8739, 0.4116, 0.7636, 0.8075, 0.7918, 0.756, 0.8868, 0.3539, 0.9022, 0.2971, 0.8116, 0.701, 0.9222, 0.2422, 0.8269, 0.6442, 0.8642, 0.3348, 0.7612, 0.7287, 0.7807, 0.6746, 0.8829, 0.2803, 0.9507, 0.1909, 0.9075, 0.2287, 0.7964, 0.6188, 0.8101, 0.562, 0.5673, 0.8683, 0.6415, 0.8572, 0.8228, 0.5049, 0.8355, 0.4477, 0.6975, 0.8245, 0.7351, 0.7797, 0.8489, 0.3908, 0.795, 0.4792, 0.8088, 0.423, 0.6303, 0.8356, 0.6769, 0.7985, 0.7094, 0.7521, 0.8239, 0.3674, 0.8416, 0.3131, 0.7331, 0.7009, 0.7517, 0.647, 0.8637, 0.261, 0.8934, 0.2131, 0.9428, 0.1825, 0.7673, 0.5917, 0.7814, 0.5356, 0.5665, 0.8561, 0.8445, 0.2394, 0.724, 0.6192, 0.8799, 0.1955, 0.9299, 0.1622, 0.7392, 0.5639, 0.7533, 0.508, 0.7673, 0.4521, 0.5633, 0.8443, 0.6181, 0.8154, 0.7821, 0.3966, 0.6572, 0.7739, 0.6852, 0.7255, 0.7987, 0.342, 0.8187, 0.2891, 0.7066, 0.6734, 0.605, 0.7968, 0.6379, 0.7511, 0.7549, 0.369, 0.662, 0.7004, 0.7728, 0.315, 0.7952, 0.2633, 0.681, 0.647, 0.697, 0.592, 0.8251, 0.2159, 0.8671, 0.1762, 0.9256, 0.1507, 0.7115, 0.5362, 0.7253, 0.4802, 0.5583, 0.8331, 0.7395, 0.4243, 0.6704, 0.5662, 0.8553, 0.1554, 0.6838, 0.5096, 0.697, 0.453, 0.711, 0.3967, 0.552, 0.8229, 0.5912, 0.78, 0.7267, 0.3412, 0.6187, 0.7305, 0.7457, 0.2873, 0.6393, 0.6774, 0.7705, 0.2363, 0.656, 0.6223, 0.805, 0.1906, 0.697, 0.314, 0.5995, 0.7122, 0.7167, 0.2596, 0.7437, 0.2085, 0.6167, 0.6567, 0.631, 0.6, 0.6437, 0.5426, 0.7838, 0.1641, 0.8448, 0.1333, 0.9234, 0.1387, 0.6557, 0.4849, 0.668, 0.4273, 0.5445, 0.8138, 0.5768, 0.7653, 0.6814, 0.3701, 0.8363, 0.1103, 0.9275, 0.1147, 0.627, 0.4628, 0.6379, 0.404, 0.6502, 0.3457, 0.5362, 0.806, 0.562, 0.7528, 0.665, 0.2884, 0.5801, 0.6966, 0.5941, 0.639, 0.6847, 0.2328, 0.7136, 0.1808, 0.6059, 0.5805, 0.6166, 0.5217, 0.7604, 0.1367, 0.5606, 0.684, 0.5714, 0.6244, 0.6488, 0.2083, 0.6783, 0.1543, 0.5806, 0.5644, 0.7327, 0.1088, 0.5891, 0.5043, 0.8314, 0.0866, 0.5975, 0.4441, 0.6066, 0.3841, 0.6171, 0.3244, 0.5272, 0.7996, 0.5468, 0.7426, 0.6303, 0.2656, 0.5672, 0.4296, 0.5739, 0.3684, 0.5819, 0.3075, 0.5178, 0.7949, 0.5313, 0.7351, 0.5923, 0.247, 0.5409, 0.6744, 0.6078, 0.1876, 0.635, 0.1306, 0.5484, 0.6134, 0.5549, 0.5522, 0.561, 0.4909, 0.696, 0.0815, 0.8339, 0.0627, 0.9355, 0.1038, 0.5612, 0.1728, 0.5806, 0.1125, 0.5252, 0.6062, 0.6382, 0.0568, 0.5289, 0.5441, 0.5324, 0.482, 0.8565, 0.0399, 0.9666, 0.0879, 0.536, 0.4199, 0.54, 0.3579, 0.5448, 0.2959, 0.508, 0.7918, 0.5156, 0.7302, 0.5512, 0.2341, 0.521, 0.6683, 0.5053, 0.3531, 0.4981, 0.7904, 0.4998, 0.728, 0.5064, 0.2906, 0.5079, 0.2282, 0.501, 0.6655, 0.5103, 0.1657, 0.5152, 0.1034, 0.502, 0.603, 0.5342, 0.0413, 0.5028, 0.5405, 0.5036, 0.4781, 0.9477, 0.0234, 0.5044, 0.4156, 0.4465, 0.1059, 0.4766, 0.5415, 0.4747, 0.4791, 1.405, 0.0461, 1.0959, 0.0288, 0.9886, 0.0848, 0.4727, 0.4168, 0.4704, 0.3544, 0.4677, 0.2921, 0.4882, 0.7908, 0.484, 0.7286, 0.464, 0.2298, 0.481, 0.6662, 0.4787, 0.6039, 0.4582, 0.1677, 0.4783, 0.7929, 0.4682, 0.7319, 0.4298, 0.3001, 0.4215, 0.2388, 0.4611, 0.6705, 0.4089, 0.1782, 0.3853, 0.1193, 0.4554, 0.6088, 0.3238, 0.0667, 0.4505, 0.547, 0.4459, 0.4852, 0.405, 0.0461, 0.1478, 0.0493, 0.0959, 0.0288, 0.0322, 0.0904, 0.4412, 0.4234, 0.436, 0.3617, 0.4247, 0.5569, 0.4175, 0.496, 0.2773, 0.093, 0.159, 0.0728, 0.0482, 0.0982, 0.4104, 0.4352, 0.4026, 0.3745, 0.3934, 0.3141, 0.4687, 0.7967, 0.4526, 0.738, 0.3817, 0.2543, 0.4413, 0.6781, 0.3646, 0.1958, 0.3359, 0.1402, 0.4324, 0.6176, 0.3591, 0.333, 0.3451, 0.2748, 0.4372, 0.7466, 0.4216, 0.689, 0.3259, 0.2183, 0.4095, 0.6302, 0.2964, 0.1653, 0.2453, 0.1207, 0.3992, 0.5708, 0.3897, 0.5112, 0.1576, 0.0967, 0.3803, 0.4515, 0.3704, 0.3921, 0.4594, 0.8021, 0.2198, 0.1484, 0.3624, 0.5302, 0.1509, 0.1202, 0.065, 0.1196, 0.3512, 0.4718, 0.3397, 0.4135, 0.3269, 0.3558, 0.4507, 0.8091, 0.3116, 0.299, 0.4222, 0.7578, 0.4022, 0.7029, 0.2918, 0.244, 0.2636, 0.1925, 0.3868, 0.6461, 0.3739, 0.5884, 0.4075, 0.7713, 0.3829, 0.7197, 0.2807, 0.3254, 0.2612, 0.2713, 0.2351, 0.2203, 0.3642, 0.6652, 0.3489, 0.6092, 0.3355, 0.5523, 0.1975, 0.1755, 0.1415, 0.1428, 0.0673, 0.1317, 0.3228, 0.4951, 0.3101, 0.438, 0.4428, 0.8175, 0.2964, 0.3812, 0.3088, 0.577, 0.1303, 0.1644, 0.0665, 0.1439, 0.295, 0.5208, 0.2814, 0.4644, 0.4357, 0.8271, 0.2673, 0.4083, 0.2517, 0.353, 0.3934, 0.7869, 0.3637, 0.739, 0.2331, 0.2991, 0.2094, 0.2479, 0.3416, 0.6869, 0.1769, 0.2015, 0.3239, 0.6326, 0.224, 0.3808, 0.3445, 0.7606, 0.2066, 0.3266, 0.1852, 0.2745, 0.3187, 0.7109, 0.2987, 0.658, 0.1572, 0.2261, 0.2821, 0.6034, 0.1181, 0.1846, 0.0633, 0.1557, 0.2673, 0.5479, 0.2533, 0.492, 0.2392, 0.4361, 0.4299, 0.8378, 0.3799, 0.8045, 0.105, 0.2032, 0.0583, 0.1669, 0.2395, 0.5757, 0.2253, 0.5198, 0.4256, 0.8493, 0.3671, 0.8238, 0.2115, 0.4638, 0.197, 0.408, 0.3251, 0.7841, 0.181, 0.353, 0.162, 0.2996, 0.2952, 0.7367, 0.1379, 0.2489, 0.2728, 0.685, 0.2549, 0.631, 0.156, 0.3777, 0.1393, 0.3226, 0.2705, 0.7637, 0.1187, 0.2695, 0.2457, 0.7127, 0.2267, 0.6588, 0.0912, 0.22, 0.052, 0.1771, 0.211, 0.6033, 0.197, 0.547, 0.4234, 0.8613, 0.3553, 0.8446, 0.1838, 0.4904, 0.1704, 0.4338, 0.305, 0.8094, 0.168, 0.5727, 0.1557, 0.5151, 0.4238, 0.8735, 0.3448, 0.8667, 0.1437, 0.4574, 0.2838, 0.8359, 0.2437, 0.7915, 0.131, 0.4, 0.1167, 0.3433, 0.2167, 0.7404, 0.197, 0.686, 0.0995, 0.2878, 0.0768, 0.2347, 0.0445, 0.1862, 0.1814, 0.6299, 0.2136, 0.8192, 0.0941, 0.361, 0.0801, 0.3034, 0.1847, 0.7672, 0.165, 0.7116, 0.062, 0.2472, 0.0362, 0.194, 0.1502, 0.6543, 0.1379, 0.596, 0.127, 0.5372, 0.4275, 0.8853, 0.1166, 0.4783, 0.3364, 0.8897, 0.2604, 0.8633, 0.1059, 0.4195, 0.1066, 0.6159, 0.0975, 0.5559, 0.4355, 0.8962, 0.3314, 0.9134, 0.0891, 0.4957, 0.2327, 0.8912, 0.1783, 0.8457, 0.0806, 0.4356, 0.0714, 0.3756, 0.0606, 0.316, 0.1488, 0.7917, 0.1303, 0.7344, 0.0468, 0.2574, 0.1171, 0.6756, 0.4953, 0.8529, 0.9953, 0.1471, 1.0178, 0.2051, 1.008, 0.2082, 1.008, 0.2082, 0.9357, 0.1729, 0.9238, 0.1265, 0.9485, 0.0945, 1.0116, 0.0857, 1.0322, 0.0904, 1.0322, 0.0904, 1.0482, 0.0982, 1.0482, 0.0982, 1.059, 0.1082, 1.065, 0.1196, 1.065, 0.1196, 1.0673, 0.1317, 1.0673, 0.1317, 1.0665, 0.1439, 1.0665, 0.1439, 1.0633, 0.1557, 1.0633, 0.1557, 1.0583, 0.1669, 1.0583, 0.1669, 1.052, 0.1771, 1.052, 0.1771, 1.0445, 0.1862, 1.0445, 0.1862, 1.0362, 0.194, 1.0362, 0.194, 1.0272, 0.2004, 0.0178, 0.2051, 0.0178, 0.2051, 1.0156, 0.2698, 1.021, 0.3317, 1.008, 0.2082, 1.0156, 0.2698, 1.0053, 0.6469, 1.0064, 0.7094, 1.0044, 0.5844, 1.0053, 0.6469, 1.0036, 0.5219, 1.0044, 0.5844, 1.0342, 0.9587, 1.0028, 0.4595, 1.0152, 0.8966, 1.0342, 0.9587, 1.002, 0.397, 1.0103, 0.8343, 1.0152, 0.8966, 1.001, 0.3345, 1.002, 0.397, 1.0079, 0.7718, 1.0103, 0.8343, 1.001, 0.3345, 1.0064, 0.7094, 0.405, 0.0461, 0.405, 0.0461, 0.0959, 0.0288, 0.405, 0.0461, 0.0116, 0.0857, 0.0959, 0.0288, 0.059, 0.1082, 0.059, 0.1082, 0.0272, 0.2004, 0.0272, 0.2004, 0.0178, 0.2051],
		normal: [-0.7101, 0.704, 0, -0.6965, 0.704, 0.1385, -0.8173, 0.5528, 0.1626, -0.7101, -0.704, 0, -0.6965, -0.704, 0.1385, -0.549, -0.8286, 0.1092, -0.8333, 0.5528, 0, -0.907, 0.3805, 0.1804, -0.5598, -0.8286, 0, -0.3804, -0.9217, 0.0757, -0.9247, 0.3805, 0, -0.9622, 0.1939, 0.1914, -0.3879, -0.9217, 0, -0.1971, -0.9796, 0.0392, -0.981, 0.1939, 0, -0.9808, 0, 0.1951, -1, 0, 0, -0.9622, -0.1939, 0.1914, -0.201, 0.9796, 0, -0.1971, 0.9796, 0.0392, -0.3804, 0.9217, 0.0757, -0.9247, -0.3805, 0, -0.981, -0.1939, 0, -0.5598, 0.8286, 0, -0.3879, 0.9217, 0, -0.907, -0.3805, 0.1804, -0.8173, -0.5528, 0.1626, -0.549, 0.8286, 0.1092, -0.8333, -0.5528, 0, -0.5171, 0.8286, 0.2142, -0.6561, 0.704, 0.2717, -0.7699, -0.5528, 0.3189, -0.7699, 0.5528, 0.3189, -0.6561, -0.704, 0.2717, -0.5171, -0.8286, 0.2142, -0.8544, 0.3805, 0.3539, -0.549, -0.8286, 0.1092, -0.5171, -0.8286, 0.2142, -0.3583, -0.9217, 0.1484, -0.9063, 0.1939, 0.3754, -0.3804, -0.9217, 0.0757, -0.1856, -0.9796, 0.0769, -0.9239, 0, 0.3827, -0.1856, 0.9796, 0.0769, -0.3583, 0.9217, 0.1484, -0.9063, -0.1939, 0.3754, -0.8544, -0.3805, 0.3539, -0.9063, 0.1939, 0.3754, -0.8157, 0.1939, 0.545, -0.8314, 0, 0.5556, -0.9239, 0, 0.3827, -0.8157, -0.1939, 0.545, -0.1671, 0.9796, 0.1116, -0.3225, 0.9217, 0.2155, -0.9063, -0.1939, 0.3754, -0.7689, -0.3805, 0.5137, -0.4654, 0.8286, 0.311, -0.7699, -0.5528, 0.3189, -0.8544, -0.3805, 0.3539, -0.5171, 0.8286, 0.2142, -0.5904, 0.704, 0.3945, -0.6561, -0.704, 0.2717, -0.7699, -0.5528, 0.3189, -0.6929, -0.5528, 0.463, -0.6561, 0.704, 0.2717, -0.6929, 0.5528, 0.463, -0.6561, -0.704, 0.2717, -0.5904, -0.704, 0.3945, -0.4654, -0.8286, 0.311, -0.7699, 0.5528, 0.3189, -0.7689, 0.3805, 0.5137, -0.5171, -0.8286, 0.2142, -0.3225, -0.9217, 0.2155, -0.9063, 0.1939, 0.3754, -0.8544, 0.3805, 0.3539, -0.1671, -0.9796, 0.1116, -0.5893, -0.5528, 0.5893, -0.5021, -0.704, 0.5021, -0.5021, 0.704, 0.5021, -0.5893, 0.5528, 0.5893, -0.3958, -0.8286, 0.3958, -0.6539, 0.3805, 0.6539, -0.2743, -0.9217, 0.2743, -0.6937, 0.1939, 0.6937, -0.1421, -0.9796, 0.1421, -0.7071, 0, 0.7071, -0.6937, -0.1939, 0.6937, -0.1421, 0.9796, 0.1421, -0.2743, 0.9217, 0.2743, -0.6539, -0.3805, 0.6539, -0.3958, 0.8286, 0.3958, -0.5556, 0, 0.8314, -0.545, -0.1939, 0.8157, -0.1116, 0.9796, 0.1671, -0.2155, 0.9217, 0.3225, -0.5137, -0.3805, 0.7689, -0.311, 0.8286, 0.4654, -0.3945, 0.704, 0.5904, -0.463, -0.5528, 0.6929, -0.3945, -0.704, 0.5904, -0.463, 0.5528, 0.6929, -0.5137, 0.3805, 0.7689, -0.311, -0.8286, 0.4654, -0.545, 0.1939, 0.8157, -0.2155, -0.9217, 0.3225, -0.1116, -0.9796, 0.1671, -0.2717, 0.704, 0.6561, -0.2717, -0.704, 0.6561, -0.2142, -0.8286, 0.5171, -0.3189, 0.5528, 0.7699, -0.3539, 0.3805, 0.8544, -0.1484, -0.9217, 0.3583, -0.0769, -0.9796, 0.1856, -0.3754, 0.1939, 0.9063, -0.3827, 0, 0.9239, -0.3754, -0.1939, 0.9063, -0.0769, 0.9796, 0.1856, -0.1484, 0.9217, 0.3583, -0.3539, -0.3805, 0.8544, -0.2142, 0.8286, 0.5171, -0.3189, -0.5528, 0.7699, -0.1951, 0, 0.9808, -0.1914, -0.1939, 0.9622, -0.0392, 0.9796, 0.1971, -0.0757, 0.9217, 0.3804, -0.1804, -0.3805, 0.907, -0.1092, 0.8286, 0.549, -0.1626, -0.5528, 0.8173, -0.1385, 0.704, 0.6965, -0.1626, 0.5528, 0.8173, -0.1385, -0.704, 0.6965, -0.1092, -0.8286, 0.549, -0.1804, 0.3805, 0.907, -0.0757, -0.9217, 0.3804, -0.1914, 0.1939, 0.9622, 0, -0.704, 0.7101, 0, 0.5528, 0.8333, 0, 0.3805, 0.9247, 0, -0.8286, 0.5598, -0.0392, -0.9796, 0.1971, 0, -0.9217, 0.3879, 0, 0.1939, 0.981, 0, 0, 1, 0, 0.9796, 0.201, 0, 0.9217, 0.3879, 0, -0.1939, 0.981, 0, -0.3805, 0.9247, 0, 0.8286, 0.5598, 0, 0.704, 0.7101, 0, -0.5528, 0.8333, 0.1914, -0.1939, 0.9622, 0.1804, -0.3805, 0.907, 0.0757, 0.9217, 0.3804, 0.1092, 0.8286, 0.549, 0.1385, 0.704, 0.6965, 0.1626, -0.5528, 0.8173, 0.1385, -0.704, 0.6965, 0.1626, 0.5528, 0.8173, 0.1804, 0.3805, 0.907, 0.1092, -0.8286, 0.549, 0.0757, -0.9217, 0.3804, 0, -0.9796, 0.201, 0.1914, 0.1939, 0.9622, 0.1951, 0, 0.9808, 0.0392, 0.9796, 0.1971, 0.2142, -0.8286, 0.5171, 0.3539, 0.3805, 0.8544, 0.1484, -0.9217, 0.3583, 0.0769, -0.9796, 0.1856, 0.3754, 0.1939, 0.9063, 0.3827, 0, 0.9239, 0.3754, -0.1939, 0.9063, 0.0769, 0.9796, 0.1856, 0.1484, 0.9217, 0.3583, 0.3539, -0.3805, 0.8544, 0.2142, 0.8286, 0.5171, 0.2717, 0.704, 0.6561, 0.3189, -0.5528, 0.7699, 0.2717, -0.704, 0.6561, 0.3189, 0.5528, 0.7699, 0.2155, 0.9217, 0.3225, 0.311, 0.8286, 0.4654, 0.5137, -0.3805, 0.7689, 0.3945, 0.704, 0.5904, 0.463, -0.5528, 0.6929, 0.3945, -0.704, 0.5904, 0.463, 0.5528, 0.6929, 0.5137, 0.3805, 0.7689, 0.311, -0.8286, 0.4654, 0.2155, -0.9217, 0.3225, 0.1116, -0.9796, 0.1671, 0.545, 0.1939, 0.8157, 0.5556, 0, 0.8314, 0.1116, 0.9796, 0.1671, 0.545, -0.1939, 0.8157, 0.6539, 0.3805, 0.6539, 0.2743, -0.9217, 0.2743, 0.6937, 0.1939, 0.6937, 0.7071, 0, 0.7071, 0.6937, -0.1939, 0.6937, 0.1421, 0.9796, 0.1421, 0.2743, 0.9217, 0.2743, 0.6539, -0.3805, 0.6539, 0.3958, 0.8286, 0.3958, 0.5893, -0.5528, 0.5893, 0.5021, 0.704, 0.5021, 0.5021, -0.704, 0.5021, 0.5893, 0.5528, 0.5893, 0.3958, -0.8286, 0.3958, 0.7689, -0.3805, 0.5137, 0.4654, 0.8286, 0.311, 0.6929, -0.5528, 0.463, 0.5904, -0.704, 0.3945, 0.5904, 0.704, 0.3945, 0.6929, 0.5528, 0.463, 0.7689, 0.3805, 0.5137, 0.4654, -0.8286, 0.311, 0.3225, -0.9217, 0.2155, 0.1421, -0.9796, 0.1421, 0.8157, 0.1939, 0.545, 0.8314, 0, 0.5556, 0.1671, 0.9796, 0.1116, 0.3225, 0.9217, 0.2155, 0.8157, -0.1939, 0.545, 0.3583, -0.9217, 0.1484, 0.1856, -0.9796, 0.0769, 0.9063, 0.1939, 0.3754, 0.9239, 0, 0.3827, 0.9063, -0.1939, 0.3754, 0.1856, 0.9796, 0.0769, 0.3583, 0.9217, 0.1484, 0.8544, -0.3805, 0.3539, 0.5171, 0.8286, 0.2142, 0.6561, 0.704, 0.2717, 0.7699, -0.5528, 0.3189, 0.6561, -0.704, 0.2717, 0.7699, 0.5528, 0.3189, 0.8544, 0.3805, 0.3539, 0.5171, -0.8286, 0.2142, 0.549, 0.8286, 0.1092, 0.6965, 0.704, 0.1385, 0.8173, -0.5528, 0.1626, 0.6965, -0.704, 0.1385, 0.8173, 0.5528, 0.1626, 0.549, -0.8286, 0.1092, 0.907, 0.3805, 0.1804, 0.3804, -0.9217, 0.0757, 0.9622, 0.1939, 0.1914, 0.9808, 0, 0.1951, 0.9622, -0.1939, 0.1914, 0.1971, 0.9796, 0.0392, 0.3804, 0.9217, 0.0757, 0.907, -0.3805, 0.1804, 0.981, 0.1939, 0, 1, 0, 0, 0.981, -0.1939, 0, 0.201, 0.9796, 0, 0.3879, 0.9217, 0, 0.9247, -0.3805, 0, 0.5598, 0.8286, 0, 0.8333, -0.5528, 0, 0.7101, -0.704, 0, 0.7101, 0.704, 0, 0.8333, 0.5528, 0, 0.9247, 0.3805, 0, 0.5598, -0.8286, 0, 0.3879, -0.9217, 0, 0.1971, -0.9796, 0.0392, 0.8173, -0.5528, -0.1626, 0.6965, -0.704, -0.1385, 0.6965, 0.704, -0.1385, 0.549, -0.8286, -0.1092, 0.8173, 0.5528, -0.1626, 0.907, 0.3805, -0.1804, 0.3804, -0.9217, -0.0757, 0.1971, -0.9796, -0.0392, 0.9622, 0.1939, -0.1914, 0.9808, 0, -0.1951, 0.9622, -0.1939, -0.1914, 0.1971, 0.9796, -0.0392, 0.3804, 0.9217, -0.0757, 0.907, -0.3805, -0.1804, 0.549, 0.8286, -0.1092, 0.9239, 0, -0.3827, 0.1856, 0.9796, -0.0769, 0.3583, 0.9217, -0.1484, 0.9063, -0.1939, -0.3754, 0.8544, -0.3805, -0.3539, 0.5171, 0.8286, -0.2142, 0.7699, -0.5528, -0.3189, 0.6561, -0.704, -0.2717, 0.6561, 0.704, -0.2717, 0.5171, -0.8286, -0.2142, 0.7699, 0.5528, -0.3189, 0.8544, 0.3805, -0.3539, 0.3583, -0.9217, -0.1484, 0.9063, 0.1939, -0.3754, 0.5904, -0.704, -0.3945, 0.6929, 0.5528, -0.463, 0.7689, 0.3805, -0.5137, 0.4654, -0.8286, -0.311, 0.3225, -0.9217, -0.2155, 0.1856, -0.9796, -0.0769, 0.8157, 0.1939, -0.545, 0.8314, 0, -0.5556, 0.8157, -0.1939, -0.545, 0.1671, 0.9796, -0.1116, 0.3225, 0.9217, -0.2155, 0.7689, -0.3805, -0.5137, 0.4654, 0.8286, -0.311, 0.5904, 0.704, -0.3945, 0.6929, -0.5528, -0.463, 0.1421, 0.9796, -0.1421, 0.2743, 0.9217, -0.2743, 0.6937, -0.1939, -0.6937, 0.6539, -0.3805, -0.6539, 0.3958, 0.8286, -0.3958, 0.5893, -0.5528, -0.5893, 0.5021, -0.704, -0.5021, 0.5021, 0.704, -0.5021, 0.3958, -0.8286, -0.3958, 0.5893, 0.5528, -0.5893, 0.6539, 0.3805, -0.6539, 0.4654, -0.8286, -0.311, 0.2743, -0.9217, -0.2743, 0.3225, -0.9217, -0.2155, 0.1421, -0.9796, -0.1421, 0.6937, 0.1939, -0.6937, 0.7071, 0, -0.7071, 0.463, 0.5528, -0.6929, 0.5137, 0.3805, -0.7689, 0.311, -0.8286, -0.4654, 0.2155, -0.9217, -0.3225, 0.1116, -0.9796, -0.1671, 0.545, 0.1939, -0.8157, 0.5556, 0, -0.8314, 0.545, -0.1939, -0.8157, 0.1116, 0.9796, -0.1671, 0.2155, 0.9217, -0.3225, 0.5137, -0.3805, -0.7689, 0.311, 0.8286, -0.4654, 0.463, -0.5528, -0.6929, 0.3945, -0.704, -0.5904, 0.3945, 0.704, -0.5904, 0.3754, -0.1939, -0.9063, 0.3539, -0.3805, -0.8544, 0.1484, 0.9217, -0.3583, 0.2142, 0.8286, -0.5171, 0.3189, -0.5528, -0.7699, 0.2717, 0.704, -0.6561, 0.2717, -0.704, -0.6561, 0.2142, -0.8286, -0.5171, 0.3189, 0.5528, -0.7699, 0.3539, 0.3805, -0.8544, 0.1484, -0.9217, -0.3583, 0.3754, 0.1939, -0.9063, 0.3827, 0, -0.9239, 0.0769, 0.9796, -0.1856, 0.1092, -0.8286, -0.549, 0.1804, 0.3805, -0.907, 0.0757, -0.9217, -0.3804, 0.0392, -0.9796, -0.1971, 0.1914, 0.1939, -0.9622, 0.1951, 0, -0.9808, 0.1914, -0.1939, -0.9622, 0.0392, 0.9796, -0.1971, 0.1804, -0.3805, -0.907, 0.0757, 0.9217, -0.3804, 0.1092, 0.8286, -0.549, 0.1626, -0.5528, -0.8173, 0.1385, -0.704, -0.6965, 0.1385, 0.704, -0.6965, 0.1626, 0.5528, -0.8173, 0, 0.9217, -0.3879, 0, 0.8286, -0.5598, 0, -0.3805, -0.9247, 0, -0.5528, -0.8333, 0, -0.704, -0.7101, 0, 0.704, -0.7101, 0, 0.5528, -0.8333, 0, 0.3805, -0.9247, 0, -0.8286, -0.5598, 0, -0.9217, -0.3879, 0, -0.9796, -0.201, 0, 0.1939, -0.981, 0, 0, -1, 0, 0.9796, -0.201, 0, -0.1939, -0.981, -0.1804, 0.3805, -0.907, -0.0757, -0.9217, -0.3804, -0.0392, -0.9796, -0.1971, -0.1914, 0.1939, -0.9622, -0.1951, 0, -0.9808, -0.0392, 0.9796, -0.1971, -0.1914, -0.1939, -0.9622, -0.1804, -0.3805, -0.907, -0.0757, 0.9217, -0.3804, -0.1092, 0.8286, -0.549, -0.1626, -0.5528, -0.8173, -0.1385, -0.704, -0.6965, -0.1385, 0.704, -0.6965, -0.1092, -0.8286, -0.549, -0.1626, 0.5528, -0.8173, -0.3539, -0.3805, -0.8544, -0.2142, 0.8286, -0.5171, -0.3189, -0.5528, -0.7699, -0.2717, -0.704, -0.6561, -0.2717, 0.704, -0.6561, -0.3189, 0.5528, -0.7699, -0.2142, -0.8286, -0.5171, -0.3539, 0.3805, -0.8544, -0.1484, -0.9217, -0.3583, -0.0769, -0.9796, -0.1856, -0.3754, 0.1939, -0.9063, -0.3827, 0, -0.9239, -0.3754, -0.1939, -0.9063, -0.0769, 0.9796, -0.1856, -0.1484, 0.9217, -0.3583, -0.2155, -0.9217, -0.3225, -0.1116, -0.9796, -0.1671, -0.545, 0.1939, -0.8157, -0.5556, 0, -0.8314, -0.1116, 0.9796, -0.1671, -0.2155, 0.9217, -0.3225, -0.545, -0.1939, -0.8157, -0.5137, -0.3805, -0.7689, -0.311, 0.8286, -0.4654, -0.463, -0.5528, -0.6929, -0.3945, -0.704, -0.5904, -0.3945, 0.704, -0.5904, -0.311, -0.8286, -0.4654, -0.463, 0.5528, -0.6929, -0.5137, 0.3805, -0.7689, -0.5893, -0.5528, -0.5893, -0.5021, -0.704, -0.5021, -0.5021, 0.704, -0.5021, -0.3958, -0.8286, -0.3958, -0.5893, 0.5528, -0.5893, -0.6539, 0.3805, -0.6539, -0.2743, -0.9217, -0.2743, -0.1421, -0.9796, -0.1421, -0.6937, 0.1939, -0.6937, -0.7071, 0, -0.7071, -0.1421, 0.9796, -0.1421, -0.2743, 0.9217, -0.2743, -0.6937, -0.1939, -0.6937, -0.6539, -0.3805, -0.6539, -0.3958, 0.8286, -0.3958, -0.8314, 0, -0.5556, -0.8157, -0.1939, -0.545, -0.1671, 0.9796, -0.1116, -0.3225, 0.9217, -0.2155, -0.7689, -0.3805, -0.5137, -0.4654, 0.8286, -0.311, -0.5904, 0.704, -0.3945, -0.6929, -0.5528, -0.463, -0.5904, -0.704, -0.3945, -0.6929, 0.5528, -0.463, -0.7689, 0.3805, -0.5137, -0.4654, -0.8286, -0.311, -0.3225, -0.9217, -0.2155, -0.1671, -0.9796, -0.1116, -0.8157, 0.1939, -0.545, -0.6561, 0.704, -0.2717, -0.6561, -0.704, -0.2717, -0.5171, -0.8286, -0.2142, -0.7699, 0.5528, -0.3189, -0.8544, 0.3805, -0.3539, -0.3583, -0.9217, -0.1484, -0.1856, -0.9796, -0.0769, -0.9063, 0.1939, -0.3754, -0.9239, 0, -0.3827, -0.9063, -0.1939, -0.3754, -0.1856, 0.9796, -0.0769, -0.8544, -0.3805, -0.3539, -0.3583, 0.9217, -0.1484, -0.5171, 0.8286, -0.2142, -0.7699, -0.5528, -0.3189, -0.9808, 0, -0.1951, -0.9622, -0.1939, -0.1914, -0.1971, 0.9796, -0.0392, -0.3804, 0.9217, -0.0757, -0.907, -0.3805, -0.1804, -0.549, 0.8286, -0.1092, -0.6965, 0.704, -0.1385, -0.8173, -0.5528, -0.1626, -0.6965, -0.704, -0.1385, -0.549, -0.8286, -0.1092, -0.8173, 0.5528, -0.1626, -0.907, 0.3805, -0.1804, -0.3804, -0.9217, -0.0757, -0.9622, 0.1939, -0.1914, 0, 1, 0, 0, -1, 0, -0.201, -0.9796, 0, -0.1971, -0.9796, 0.0392, -0.1971, -0.9796, 0.0392, 0.0392, -0.9796, 0.1971, 0.1671, -0.9796, 0.1116, 0.201, -0.9796, 0, 0.1671, -0.9796, -0.1116, 0.1421, -0.9796, -0.1421, 0.1421, -0.9796, -0.1421, 0.1116, -0.9796, -0.1671, 0.1116, -0.9796, -0.1671, 0.0769, -0.9796, -0.1856, 0.0392, -0.9796, -0.1971, 0.0392, -0.9796, -0.1971, 0, -0.9796, -0.201, 0, -0.9796, -0.201, -0.0392, -0.9796, -0.1971, -0.0392, -0.9796, -0.1971, -0.0769, -0.9796, -0.1856, -0.0769, -0.9796, -0.1856, -0.1116, -0.9796, -0.1671, -0.1116, -0.9796, -0.1671, -0.1421, -0.9796, -0.1421, -0.1421, -0.9796, -0.1421, -0.1671, -0.9796, -0.1116, -0.1671, -0.9796, -0.1116, -0.1856, -0.9796, -0.0769, -0.1856, -0.9796, -0.0769, -0.1971, -0.9796, -0.0392, -0.201, -0.9796, 0, -0.201, -0.9796, 0, -0.3804, -0.9217, 0.0757, -0.549, -0.8286, 0.1092, -0.1971, -0.9796, 0.0392, -0.3804, -0.9217, 0.0757, -0.9239, 0, 0.3827, -0.9063, 0.1939, 0.3754, -0.9063, -0.1939, 0.3754, -0.9239, 0, 0.3827, -0.8544, -0.3805, 0.3539, -0.9063, -0.1939, 0.3754, -0.5171, 0.8286, 0.2142, -0.7699, -0.5528, 0.3189, -0.6561, 0.704, 0.2717, -0.5171, 0.8286, 0.2142, -0.6561, -0.704, 0.2717, -0.7699, 0.5528, 0.3189, -0.6561, 0.704, 0.2717, -0.5171, -0.8286, 0.2142, -0.6561, -0.704, 0.2717, -0.8544, 0.3805, 0.3539, -0.7699, 0.5528, 0.3189, -0.5171, -0.8286, 0.2142, -0.9063, 0.1939, 0.3754, 0.4654, -0.8286, -0.311, 0.4654, -0.8286, -0.311, 0.3225, -0.9217, -0.2155, 0.4654, -0.8286, -0.311, 0.1671, -0.9796, -0.1116, 0.3225, -0.9217, -0.2155, 0.0769, -0.9796, -0.1856, 0.0769, -0.9796, -0.1856, -0.1971, -0.9796, -0.0392, -0.1971, -0.9796, -0.0392, -0.201, -0.9796, 0]
	}
	this.cube = sys.cube; this.plane = sys.plane; this.sphere = sys.sphere;
	sys.degToRad = function (angle) {
		return (angle * Math.PI / 180);
	};
	sys.radToDeg = function (angle) {
		return (angle * 180 / Math.PI);
	};
	sys.radToDeg_ARRAY = function (array) {
		return [array[0] * 180 / Math.PI, array[1] * 180 / Math.PI, array[2] * 180 / Math.PI];
	};
	this.degToRad = sys.degToRad;
	this.radToDeg = sys.radToDeg;
	this.radToDeg_ARRAY = sys.radToDeg_ARRAY;
	sys.rotatePoint = function (angle, point, center) {
		var ang = [sys.degToRad(angle[0]), sys.degToRad(angle[1]), sys.degToRad(angle[2])];
		var ret;
		ret = sys.Matrix3.mult(sys.Matrix3.createMatrixRotateX(ang[0]), sys.Matrix3.createMatrixRotateY(ang[1]));
		ret = sys.Matrix3.mult(ret, sys.Matrix3.createMatrixRotateZ(ang[2]));
		var vecminus = [point[0] - center[0], point[1] - center[1], point[2] - center[2]];
		ret = sys.Matrix3.multipleMatAndVector3(ret, vecminus);
		ret = [ret[0] + center[0], ret[1] + center[1], ret[2] + center[2]];
		return ret;
	};
	sys.Matrix4 = {
		get_I4: function () { return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; },
		get_projection: function (angle, a, zMin, zMax) {
			var tan = Math.tan(sys.degToRad(0.5 * angle)), A = -(zMax + zMin) / (zMax - zMin), B = (-2 * zMax * zMin) / (zMax - zMin);
			return [0.5 / tan, 0, 0, 0, 0, 0.5 * a / tan, 0, 0, 0, 0, A, -1, 0, 0, B, 0];
		},
		get_ortho: function (left, right, bottom, top, near, far) {
			var lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);
			var out = sys.Matrix4.get_I4();
			out[0] = -2 * lr;
			out[1] = 0;
			out[2] = 0;
			out[3] = 0;
			out[4] = 0;
			out[5] = -2 * bt;
			out[6] = 0;
			out[7] = 0;
			out[8] = 0;
			out[9] = 0;
			out[10] = 2 * nf;
			out[11] = 0;
			out[12] = (left + right) * lr;
			out[13] = (top + bottom) * bt;
			out[14] = (far + near) * nf;
			out[15] = 1;
			return out;
		},
		inverse: function (out, a) {
			var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
			b00 = a00 * a11 - a01 * a10,
			b01 = a00 * a12 - a02 * a10,
			b02 = a00 * a13 - a03 * a10,
			b03 = a01 * a12 - a02 * a11,
			b04 = a01 * a13 - a03 * a11,
			b05 = a02 * a13 - a03 * a12,
			b06 = a20 * a31 - a21 * a30,
			b07 = a20 * a32 - a22 * a30,
			b08 = a20 * a33 - a23 * a30,
			b09 = a21 * a32 - a22 * a31,
			b10 = a21 * a33 - a23 * a31,
			b11 = a22 * a33 - a23 * a32,
			det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

			if (!det) {
				return null;
			}
			det = 1.0 / det;

			out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
			out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
			out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
			out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
			out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
			out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
			out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
			out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
			out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
			out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
			out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
			out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
			out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
			out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
			out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
			out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

			return out;
		},
		zero: function () {
			return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
		},
		lookAtDir: function (eye, center, up) {
			var x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2], centerx = center[0], centery = center[1], centerz = center[2];
			z0 = eyex - centerx; z1 = eyey - centery; z2 = eyez - centerz;
			len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
			z0 *= len; z1 *= len; z2 *= len;
			x0 = upy * z2 - upz * z1; x1 = upz * z0 - upx * z2; x2 = upx * z1 - upy * z0;
			len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
			if (!len) {
				x0 = 0;
				x1 = 0;
				x2 = 0;
			} else {
				len = 1 / len;
				x0 *= len;
				x1 *= len;
				x2 *= len;
			}
			y0 = z1 * x2 - z2 * x1; y1 = z2 * x0 - z0 * x2; y2 = z0 * x1 - z1 * x0;
			len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
			if (!len) {
				y0 = 0;
				y1 = 0;
				y2 = 0;
			} else {
				len = 1 / len;
				y0 *= len;
				y1 *= len;
				y2 *= len;
			}
			var out = sys.Matrix4.get_I4();
			out[0] = x0;
			out[1] = y0;
			out[2] = z0;
			out[3] = 0;
			out[4] = x1;
			out[5] = y1;
			out[6] = z1;
			out[7] = 0;
			out[8] = x2;
			out[9] = y2;
			out[10] = z2;
			out[11] = 0;
			out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
			out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
			out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
			out[15] = 1;
			return out;
		},
		rotateX: function (m, angle) {
			angle = sys.degToRad(angle);
			var c = Math.cos(angle);
			var s = Math.sin(angle);
			var mv1 = m[1], mv5 = m[5], mv9 = m[9];
			m[1] = m[1] * c - m[2] * s;
			m[5] = m[5] * c - m[6] * s;
			m[9] = m[9] * c - m[10] * s;
			m[2] = m[2] * c + mv1 * s;
			m[6] = m[6] * c + mv5 * s;
			m[10] = m[10] * c + mv9 * s;
		},
		rotateY: function (m, angle) {
			angle = sys.degToRad(angle);
			var c = Math.cos(angle);
			var s = Math.sin(angle);
			var mv0 = m[0],
				mv4 = m[4],
				mv8 = m[8];
			m[0] = c * m[0] + s * m[2];
			m[4] = c * m[4] + s * m[6];
			m[8] = c * m[8] + s * m[10];
			m[2] = c * m[2] - s * mv0;
			m[6] = c * m[6] - s * mv4;
			m[10] = c * m[10] - s * mv8;
		},
		rotateZ: function (m, angle) {
			angle = sys.degToRad(angle);
			var c = Math.cos(angle);
			var s = Math.sin(angle);
			var mv0 = m[0],
				mv4 = m[4],
				mv8 = m[8];
			m[0] = c * m[0] - s * m[1];
			m[4] = c * m[4] - s * m[5];
			m[8] = c * m[8] - s * m[9];
			m[1] = c * m[1] + s * mv0;
			m[5] = c * m[5] + s * mv4;
			m[9] = c * m[9] + s * mv8;
		},
		mult: function (a, b) {
			var m = sys.Matrix4.get_I4();
			m[0] = a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12];
			m[1] = a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13];
			m[2] = a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14];
			m[3] = a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15];

			m[4] = a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12];
			m[5] = a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13];
			m[6] = a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14];
			m[7] = a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15];

			m[8] = a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12];
			m[9] = a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13];
			m[10] = a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14];
			m[11] = a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15];

			m[12] = a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12];
			m[13] = a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13];
			m[14] = a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14];
			m[15] = a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15];
			return m;
		},
		rmult: function (b, a) {
			return Matrix4.mult(b, a);
		},
		multMatrixAndVector: function (a, b) {
			var m = [0, 0, 0, 0];
			m[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
			m[1] = a[4] * b[0] + a[5] * b[1] + a[6] * b[2] + a[7] * b[3];
			m[2] = a[8] * b[0] + a[9] * b[1] + a[10] * b[2] + a[11] * b[3];
			m[3] = a[12] * b[0] + a[13] * b[1] + a[14] * b[2] + a[15] * b[3];
			return m;
		},
		translateZ: function (m, t) {
			m[14] += t;
		},
		translateX: function (m, t) {
			m[12] += t;
		},
		translateY: function (m, t) {
			m[13] -= t;
		},
		set_position: function (m, x) {
			m[12] = x[0], m[13] = x[1], m[14] = x[2];
		},
		set_size: function (a, v) {
			var x = v[0], y = v[1], z = v[2];
			a[0] = a[0] * x;
			a[1] = a[1] * x;
			a[2] = a[2] * x;
			a[3] = a[3] * x;
			a[4] = a[4] * y;
			a[5] = a[5] * y;
			a[6] = a[6] * y;
			a[7] = a[7] * y;
			a[8] = a[8] * z;
			a[9] = a[9] * z;
			a[10] = a[10] * z;
			a[11] = a[11] * z;
			a[12] = a[12];
			a[13] = a[13];
			a[14] = a[14];
			a[15] = a[15];
		},
		transpose: function (out, a) {
			if (out === a) {
				var a01 = a[1], a02 = a[2], a03 = a[3],
					a12 = a[6], a13 = a[7],
					a23 = a[11];

				out[1] = a[4];
				out[2] = a[8];
				out[3] = a[12];
				out[4] = a01;
				out[6] = a[9];
				out[7] = a[13];
				out[8] = a02;
				out[9] = a12;
				out[11] = a[14];
				out[12] = a03;
				out[13] = a13;
				out[14] = a23;
			} else {
				out[0] = a[0];
				out[1] = a[4];
				out[2] = a[8];
				out[3] = a[12];
				out[4] = a[1];
				out[5] = a[5];
				out[6] = a[9];
				out[7] = a[13];
				out[8] = a[2];
				out[9] = a[6];
				out[10] = a[10];
				out[11] = a[14];
				out[12] = a[3];
				out[13] = a[7];
				out[14] = a[11];
				out[15] = a[15];
			}

			return out;
		}
	};
	sys.Matrix3 ={
		createMatrixRotateX: function (a) {
			return [1, 0, 0, 0, Math.cos(a), Math.sin(a), 0, -Math.sin(a), Math.cos(a)];
		},
		createMatrixRotateY: function (a) {
			return [Math.cos(a), 0, -Math.sin(a), 0, 1, 0, Math.sin(a), 0, Math.cos(a)];
		},
		createMatrixRotateZ: function (a) {
			return [Math.cos(a), Math.sin(a), 0, -Math.sin(a), Math.cos(a), 0, 0, 0, 1];
		},
		multipleMatAndVector3: function (matrix, vector) {
			return [
			matrix[0] * vector[0] + matrix[1] * vector[1] + matrix[2] * vector[2],
			matrix[3] * vector[0] + matrix[4] * vector[1] + matrix[5] * vector[2],
			matrix[6] * vector[0] + matrix[7] * vector[1] + matrix[8] * vector[2]
			];
		},
		mult: function (a, b) {
			var m = [0, 0, 0, 0, 0, 0, 0, 0, 0];
			m[0] = a[0] * b[0] + a[1] * b[3] + a[2] * b[6];
			m[1] = a[0] * b[1] + a[1] * b[4] + a[2] * b[7];
			m[2] = a[0] * b[2] + a[1] * b[5] + a[2] * b[8];

			m[3] = a[3] * b[0] + a[4] * b[3] + a[5] * b[6];
			m[4] = a[3] * b[1] + a[4] * b[4] + a[5] * b[7];
			m[5] = a[3] * b[2] + a[4] * b[5] + a[5] * b[8];

			m[6] = a[6] * b[0] + a[7] * b[3] + a[8] * b[6];
			m[7] = a[6] * b[1] + a[7] * b[4] + a[8] * b[7];
			m[8] = a[6] * b[2] + a[7] * b[5] + a[8] * b[8];
			return m;
		}
	};
	sys.Vector3 ={
		sum: function (v1, v2) {
			if (Array.isArray(v2) === true) {
				return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
			} else {
				return [v1[0] + v2, v1[1] + v2, v1[2] + v2];
			}
		},
		minus: function (v1, v2) {
			if (Array.isArray(v2) === true) {
				return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
			} else {
				return [v1[0] - v2, v1[1] - v2, v1[2] - v2];
			}
		},
		mul: function (v1, v2) {
			if (Array.isArray(v2) === true) {
				return [v1[0] * v2[0], v1[1] * v2[1], v1[2] * v2[2]];
			} else {
				return [v1[0] * v2, v1[1] * v2, v1[2] * v2];
			}
		},
		div: function (v1, v2) {
			if (Array.isArray(v2) === true) {
				return [v1[0] / v2[0], v1[1] / v2[1], v1[2] / v2[2]];
			} else {
				return [v1[0] / v2, v1[1] / v2, v1[2] / v2];
			}
		},
		toVec4: function (vec3, v4) {
			return [vec3[0], vec3[1], vec3[2], v4];
		},
		abs: function (v) {
			return [Math.abs(v[0]), Math.abs(v[1]), Math.abs(v[2])];
		},
		sizeVector: function (v) {
			return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
		},
		length: function (v1, v2) {
			return sys.Vector3.sizeVector([v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]]);
		},
		normalize: function (vv) {
			var v = cloneArray(vv);
			var n = sys.Vector3.sizeVector(v);
			v[0] /= n; v[1] /= n; v[2] /= n;
			return v;
		},
		cross: function (a, b) {
			var a1 = a[0], a2 = a[1], a3 = a[2], b1 = b[0], b2 = b[1], b3 = b[2];
			return [a2 * b3 - a3 * b2, a3 * b1 - a1 * b3, a1 * b2 - a2 * b1]
		}
	};
	sys.Vector4={
		sizeVector: function (v) {
			return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]+ v[3] * v[3]);
		},
		length: function (v1, v2) {
			return Vector4.sizeVector([v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2], v1[3] - v2[3]]);
		},
		normalize: function (vv) {
			var v = cloneArray(vv);
			var n = sys.Vector4.sizeVector(v);
			v[0] /= n; v[1] /= n; v[2] /= n; v[3] /= n;
			return v;
		},

	}

	this.v3 = sys.Vector3;
	this.importCollada = function (colladaURL, callback) {
		var xhr = new XMLHttpRequest();
		xhr.open("GET", colladaURL, true);
		xhr.onload = function (e) {
			callback(xhr.response);
		};
	};
	this.rotatePoint = sys.rotatePoint;
	var uid_materials = 0;
	sys.preTexture = {};
	sys.shaderMaterialFunc = {
		shader: ["mix", "mul", "sum", "diffuse", "specular", "emission", "gammaCorrection","ao","emission"],
		texture: ["texture", "proceduralTexture", "ambient"],
		color: ["color", "mix", "mul"],
		vector: ["normalMap"],
		out: ["out","alpha"]
	};
	this.createMaterial = function (data) {
		var material = {};
		material.shader;
		var nodes = [];
		var u = cloneObject(sys.shaderMaterialFunc),
		usable = {};
		alob(u, function (m,n,a) {
			usable[n] = {};
			alob(m, function (t,na) {
				usable[n][t] = 0;
			})
		});
		data.forEach(function (node) {
			var ret = {};

			switch (node.type) {
				/*case "value4": {
					usable.value4++;
					ret = {
						//shaderFunction: "vec4 _value4(vec4 val){return val;}",
						shaderFunction: "",
						uniform: "_u_value4_" + (usable.value4 - 1),
						type: "vec4",
						functionType: 0
					}
					//ret.code = "_value4(" + ret.uniform + ")";
					ret.code = ret.uniform;
				}; break; */
				case "shader.mul": {
					ret = {
						shaderFunction: "",
						functionType: 1
					}
					ret.code = nodes[node.input1].sys.code + "*" + nodes[node.input2].sys.code;
				}; break;
				case "shader.ao": {
					ret = {
						shaderFunction: "",
						functionType: 1,
						uniforms: {},
						type: "vec4",
					}
					ret.uniforms["_u_ao_" + usable.shader.ao] = { type: "float", value: 1-node.value }
					ret.code = "mix(" + nodes[node.input1].sys.code + ",vec4(1.0)," + "_u_ao_" + usable.shader.ao + ")*" + nodes[node.input2].sys.code;
				}; break;
				case "shader.diffuse": {
					ret = {
						shaderFunction: "vec4 diffuseParamether=vec4(0.0);\n\
vec4 diffuse(vec4 color,float koef, vec3 lightPos, vec3 normal,float shadowCoef){\n\
float cosTheta=clamp((dot(normal.xyz,lightPos.xyz)+koef)/(1.0+koef),0.0,1.0);\n\
return vec4(vec3(color*cosTheta)*shadowCoef,color.a);}\n",
						functionType: 1,
						uniforms: {},
						type: "vec4",
						light: true
					}
					ret.code = "diffuseParamether";
					var norm = "",color = "",koef="";

					if (node.normal) {
						norm =  nodes[node.normal].sys.code+".xyz";
					} else {
						norm = "vNormal";
					}
					if (node.value1 !== undefined) {
						ret.uniforms["_u_DiffuseColor_" + usable.shader.diffuse] = {value:node.value1,type:"vec4"};
						color = "_u_DiffuseColor_" + usable.shader.diffuse;
					} else {
						color = nodes[node.input1].sys.code;
					}
					ret.uniforms["_u_DiffuseKoef_" + usable.shader.diffuse] = { value: node.value2, type: "float" };
					koef = "_u_DiffuseKoef_" + usable.shader.diffuse;

					ret.preLightCode = "diffuseParamether+=diffuse(" + color + "," + koef + ",lightPos," + norm + ",shadowCoef)*lightColor;\n";
					usable.shader.diffuse++;
				}; break;
				case "color.color": {
					ret = {
						shaderFunction: "",
						functionType: 1,
						uniforms: {},
						type: "vec4",
					}
					ret.uniforms["_u_color_" + usable.color.color] = { type: "vec4", value: node.value }
					ret.code = "_u_color_" + usable.color.color;
					usable.color.color++;
				}; break;
				case "texture.texture": {
					ret = {
						shaderFunction: "vec4 text(sampler2D sampler){return texture2D(sampler,uvs);}\n",
						functionType: 1,
						uniforms: {},
						type: "sampler2D",
						link: node.value,
					}
					ret.uniforms["_u_text_" + usable.texture.texture] = {value:0,type:"sampler2D"}
					sys.preTexture[node.value] = { link: node.value, texture: null }
					sys.imageTexture(node.value, function (texture) { sys.preTexture[node.value].texture = texture; })
					ret.code = "text(" + "_u_text_" + usable.texture.texture + ")";
					usable.texture.texture++;
				}; break;
				case "shader.sum": {
					ret = {
						shaderFunction: "",
						functionType: 1
					}
					ret.code = nodes[node.input1].sys.code + "+" + nodes[node.input2].sys.code;
				}; break;
				case "color.sum": {
					ret = {
						shaderFunction: "",
						functionType: 1
					}
					ret.code = "vec4(" + nodes[node.input1].sys.code + ".xyz+" + nodes[node.input2].sys.code + ".xyz,(" +
					nodes[node.input1].sys.code + ".w+" + nodes[node.input2].sys.code + ".w)/2.0)";
				}; break;
				case "shader.gammaCorrection": {
					ret = {
						shaderFunction: "vec4 gamma(vec4 gam,float cor){return vec4(pow(gam.xyz,vec3(1.0/cor)),gam.a);}\n",
						functionType: 0,
						uniforms: {},
						type: "float"
					}
					ret.uniforms["_u_gamma_" + usable.shader.gammaCorrection] = { type: "float", value: node.value }
					ret.code = "gamma(" + nodes[node.input].sys.code + "," + "_u_gamma_" + usable.shader.gammaCorrection + ")";
					usable.shader.gammaCorrection++;
				}; break;
				case "shader.emission": {
					ret = {
						shaderFunction: "\nvec4 emission(vec4 gam,float koef){return vec4(min(gam.rgb*koef,1.0),gam.a);}\n",
						functionType: 0,
						uniforms: {},
						type: "float",
						light:true
					}
					ret.uniforms["_u_emission_" + usable.shader.emission] = { type: "float", value: node.value }
					ret.code = "vec4(0.0)";
					ret.preLightCode = "	emissionParamether+=emission(" + nodes[node.input].sys.code + "," + "_u_emission_" + usable.shader.emission + ");\n";
					usable.shader.emission++;
				}; break;
				case "shader.mix": {
					ret = {
						shaderFunction: "vec4 mix_shad(vec4 a1,vec4 a2,float koef){return mix(a1,a2,koef);}\n",
						functionType: 1,
						uniforms:{},
						type: "vec4"
					}
					ret.uniforms["_u_mix_" + usable.shader.mix] = { value: node.koef, type: "float" }
					ret.code = "mix_shad(" + nodes[node.input1].sys.code + "," + nodes[node.input2].sys.code + "," + "_u_mix_" + usable.shader.mix + ")";
					usable.shader.mix++;
				}; break;
				case "shader.specular": {
					ret = {
						shaderFunction: "vec4 specularParamether=vec4(0.0);\nvec4 specular(vec3 lightPos,vec3 normal,vec3 color,float glossy,float specular,float shadowCoef)\n\
{\n\
vec3 viewDirW = normalize(cameraPosition - absolutePosition.xyz);\n\
vec3 h = normalize( lightPos + viewDirW );\n\
float nh = max( dot( h, normal ), 0.0 );\n\
float specPow = exp2((specular*glossy+0.000001) * 11.0);\n\
float s = pow(nh, specPow) * (specPow + 2.0) / 8.0;\n\
return vec4(color*s*shadowCoef,1.0);\n\
}\n",
						functionType: 1,
						uniforms: {},
						type: "vec4",
						light: true
					}
					var color = "",glossy="";
					if (node.value1 !== undefined) {
						ret.uniforms["_u_specularColor_" + usable.shader.specular] = { type: "vec3", value: node.value1 }
						color = "_u_specularColor_" + usable.shader.specular;
					} else {
						color = nodes[node.input1].sys.code + ".xyz";
					}
					if (node.value2 !== undefined) {
						ret.uniforms["_u_glossyParam_" + usable.shader.specular] = { type: "float", value: node.value2 }
						glossy = "_u_glossyParam_" + usable.shader.specular;
					} else {
						glossy = nodes[node.input2].sys.code + ".x";
					}
					ret.uniforms["_u_specularParam_" + usable.shader.specular] = { type: "float", value: node.value3 }
					ret.code = "specularParamether";
					var normal = "";
					if (node.normal) {
						normal = nodes[node.normal].sys.code;
					} else { normal = "vNormal";}
					ret.preLightCode = "	specularParamether+=specular(lightPos," + normal + ".xyz," + color + "," + glossy + "," + "_u_specularParam_" + usable.shader.specular + ", shadowCoef);\n";
					usable.shader.specular++;
				}; break;
				case "vector.normalMap": {
					ret = {
						shaderFunction: "mat3 cotangent_frame(vec3 N,vec3 p)\n\
{\n\
    vec3 dp1=dFdx(p);vec3 dp2=dFdy(p);\n\
    vec2 duv1=dFdx(uvs);vec2 duv2=dFdy(uvs);\n\
    vec3 dp2perp=cross(dp2,N);vec3 dp1perp=cross(N,dp1);\n\
    vec3 T=dp2perp*duv1.x+dp1perp*duv2.x;vec3 B=dp2perp*duv1.y+dp1perp*duv2.y;\n\
    float invmax=inversesqrt(max(dot(T,T),dot(B,B)));return mat3(T*invmax,B*invmax,N);\n\
}\n\
vec4 perturb_normal(vec4 samp,vec3 N, vec3 V,float koef)\n\
{\n\
	vec3 map = samp.xyz;\n\
	map = map * 255./127. - 128./127.;\n\
	mat3 TBN = cotangent_frame(N, -V);\n\
	map=mix(vec3(0.0,0.0,1.0),map,koef);\n\
	return vec4(normalize(TBN * map),1.0);\n\
}\n",
						functionType: 1,
						uniforms: {},
						type: "vec4",
					}
					ret.uniforms["_u_normalMapKoef_" + usable.vector.normalMap] = { type: "float", value: node.value }
					ret.code = "perturb_normal(" + nodes[node.input].sys.code + ",vNormal,normalize(absolutePosition.xyz)," + "_u_normalMapKoef_" + usable.vector.normalMap + ")";
					usable.vector.normalMap++;
				}; break;
				case "out.out": {
					ret = {
						//shaderFunction: "vec4 _value4(vec4 val){return val;}",
						shaderFunction: "",
						functionType: 1
					}
					ret.code = nodes[node.input].sys.code;
				}; break;
			};
			nodes[node.id] = { node: node, sys: ret, uid: uid_materials };
		});
		uid_materials++;
		return nodes;
	};
	sys.updateSplits=function(f,nd,fd,splitCount,koef)
	{
		function Ci(i, m, n, f, h) { return h * (n * Math.pow(f / n, i / m)) + (1 - h) * (n + (f - n) * i / m); }
		for(var i=1; i<splitCount+1; i++)
		{
			f[i-1].neard = Ci(i-1, splitCount, nd, fd, koef);
			f[i-1].fard = Ci(i, splitCount, nd, fd, koef);
		}
	}
	/*sys.updateFrustumPoint = function (fr, center, view_dir) {
		var up = [0.0, 1.0, 0.0];
		var right = sys.Vector3.cross(view_dir, up);
		var fc = sys.Vector3.sum(center, sys.Vector3.mul(view_dir, fr.fard));
		var nc = sys.Vector3.sum(center, sys.Vector3.mul(view_dir, fr.neard));
		right = sys.Vector3.normalize(right);
		var tmp = [];
		tmp = sys.Vector3.cross(right, view_dir);
		up = sys.Vector3.normalize(tmp);

		var near_height = Math.tan(fr.fov / 2.0) * fr.neard;
		var near_width = near_height * fr.ratio;
		var far_height = Math.tan(fr.fov / 2.0) * fr.fard;
		var far_width = far_height * fr.ratio;
		fr.point[0] = sys.Vector3.minus(nc, sys.Vector3.minus(sys.Vector3.mul(up, near_height), sys.Vector3.mul(right, near_width)))
		fr.point[1] = sys.Vector3.sum(nc, sys.Vector3.minus(sys.Vector3.mul(up, near_height), sys.Vector3.mul(right, near_width)))
		fr.point[2] = sys.Vector3.sum(nc, sys.Vector3.sum(sys.Vector3.mul(up, near_height), sys.Vector3.mul(right, near_width)))
		fr.point[3] = sys.Vector3.minus(nc, sys.Vector3.sum(sys.Vector3.mul(up, near_height), sys.Vector3.mul(right, near_width)))

		fr.point[4] = sys.Vector3.minus(fc, sys.Vector3.minus(sys.Vector3.mul(up, far_height), sys.Vector3.mul(right, far_width)))
		fr.point[5] = sys.Vector3.sum(fc, sys.Vector3.minus(sys.Vector3.mul(up, far_height), sys.Vector3.mul(right, far_width)))
		fr.point[6] = sys.Vector3.sum(fc, sys.Vector3.sum(sys.Vector3.mul(up, far_height), sys.Vector3.mul(right, far_width)))
		fr.point[7] = sys.Vector3.minus(fc, sys.Vector3.sum(sys.Vector3.mul(up, far_height), sys.Vector3.mul(right, far_width)))

		var vCenter = [0, 0, 0];
		for (var i = 0; i < 8; i++) vCenter = sys.Vector3.sum(vCenter, fr.point[i]);
		vCenter = sys.Vector3.div(vCenter, 8);
		fr.center = vCenter;
	};*/
	sys.odnorodToDecart = function (arr) { return [arr[0] / arr[3], arr[1] / arr[3], arr[2] / arr[3],]; }
	this.createLight = function (type, param, shadowOption) {
		var light = {};
		switch (type) {
			case "direction": {
				var light = {
					type: type, position: param.position, direction: sys.rotatePoint(param.direction, [0, 1, 0], [0, 0, 0]),
					directionAngle:param.direction,
					color: sys.Vector3.toVec4(sys.Vector3.mul(param.color || [1, 1, 1], param.emission || 1), 1.0),
					update: function () { },
					setColor: function (r, g, b) { light.color = [r, g, b, light.color[3]]; },
					setEmission: function (a) { light.color = [light.color[0], light.color[1], light.color[2], a]; },
					shadowOption: shadowOption
				};
				light.vector = light.direction;
				light.normalizedVector = sys.Vector3.normalize(light.vector);
				light.rotate = function (x, y, z) {
					light.direction = sys.Vector3.sum(light.direction, [x, y, z]);
					light.update();
				};
			}; break;
			case "spot": { }; break;
		}
		return light;
	};
	this.createCamera = function (position, direction, opt) {
		var camera =
		{
			position: position,
			direction: sys.rotatePoint(direction, sys.Vector3.sum(position, [0, -1, 0]), position),
			directionAngle:[sys.degToRad(direction[0]),sys.degToRad(direction[1]),sys.degToRad(direction[2])],
			translatePosition: function (x, y, z) {
				camera.position = sys.Vector3.sum(camera.position, [x, y, z]);
				camera.direction = sys.Vector3.sum(camera.direction, [x, y, z]);
				camera.CameraMatrix = sys.Matrix4.lookAtDir(camera.position, camera.direction, [0, 1, 0]);
			},
			rotate: function (x, y, z) {
				camera.directionAngle = sys.Vector3.sum(camera.position, [x, y, z]);
				camera.direction = sys.rotatePoint(camera.directionAngle, sys.Vector3.minus(camera.position, [0, 1, 0]), camera.position);
				camera.CameraMatrix = sys.Matrix4.lookAtDir(Vector3.mul(camera.position, [1, -1, 1]), camera.direction, [0, 1, 0]);
			},
			rebuild:function(){
				camera.resultMatrix = sys.Matrix4.mult(camera.CameraMatrix, camera.matrix);
			}
		};
		if (Array.isArray(direction[0])) {
			camera.directionAngle = [0, 0, 0];
			camera.direction = direction[0];
		}
		camera.CameraMatrix = sys.Matrix4.lookAtDir(camera.position, camera.direction, [0, 1, 0]);
		if (opt.type && opt.type == "orthogonal") {
			var aspect;
			if (opt.aspect == 0) { aspect = sys.wh; } else if (opt.aspect == -1) { aspect = 1; } else { aspect = opt.aspect; }
			camera.matrix = sys.Matrix4.get_ortho(-opt.width * (aspect || 1), opt.width * (aspect || 1), -opt.height, opt.height, opt.nearPlane || 0.1, opt.farPlane || 200);
			camera.type = 1;
			camera.typeString = "orthogonal";
			camera.resultMatrix = sys.Matrix4.mult(camera.CameraMatrix, camera.matrix);
			camera.setProjectionMatrix = function (left, right, up, down, zMin, zMax) {
				camera.matrix = sys.Matrix4.get_ortho(left * aspect, right * aspect, up, down, zMin, zMax);
				camera.rebuild();
			}
		} else { 
			var aspect;
			if (opt.aspect == 0) { aspect = sys.wh; } else if (opt.aspect == -1) { aspect = 1; } else { aspect = opt.aspect; }
			camera.matrix = sys.Matrix4.get_projection(opt.angle || 60, aspect || sys.wh, opt.nearPlane || 0.1, opt.farPlane || 1000);
			camera.typeString = "perspective";
			camera.resultMatrix = sys.Matrix4.mult(camera.CameraMatrix, camera.matrix);
			camera.angle = sys.degToRad(opt.angle || 60);
			camera.angleInDeg = opt.angle || 60;
			camera.near = opt.nearPlane || 0.1;
			camera.far = opt.farPlane || 1000;
			//camera.aspect = aspect;
			camera.setProjectionMatrix = function (angle, aspect0, near, far) {
				camera.matrix = sys.Matrix4.get_projection(angle, aspect0, near, far);
				camera.angle = sys.degToRad(angle);
				camera.angleInDeg = angle;
				camera.near = near;
				camera.far = far;
				camera.aspect = aspect0;
				camera.rebuild();
			}
		}
		return camera;
	};
	sys.createCamera = this.createCamera;
	this.createElement = function (values, param) {
		var par = {}; if (param) par = param;
		return {
			vertexBuffer: sys.createBuffer(values.vertex, "ARRAY_BUFFER"),
			normalBuffer: sys.createBuffer(values.normal, "ARRAY_BUFFER"),
			uvBuffer: values.uv ? sys.createBuffer(values.uv, "ARRAY_BUFFER") : null,
			indexBuffer: sys.createBuffer(values.index, "ELEMENT_ARRAY_BUFFER"),
			len: values.index.length,
			Matrix: sys.Matrix4.get_I4(), NormalMatrix: sys.Matrix4.get_I4(),
			animationStart: false,
			position: par.position || [0, 0, 0], size: par.size || [1, 1, 1], rotate: par.rotate || [0, 0, 0]
		};
	};
	this.HARD = 18;
	this.PCF = 19;
	this.VSM = 20;
	this.BLURED_VSM = 21;
	var tthis = this;
	this.createScene = function (par) {
		var scene = {};
		var p;
		if (par.shadowSetting) { p = par.shadowSetting; } else { p = {} }
		scene.shadowSetting = {
			type: p.type || "hard",
			blurScale: p.blurScale || 3,
			bitsPerChanel: p.bitsPerChanel || 2,
			splitForDirectionLight: p.splitForDirectionLight || 1,
			encodeTexture: p.encodeTexture || false,
			IOQWAIIS: p.IOQWAIIS || false,
			devideTexture: p.devideTexture || true
		};
		scene.lightCount = 0;
		scene.meshes = {};
		scene.lights = { direction: [], spot: [] };
		scene.lightForDefaultRender = {
			direction: {
				vector_: [],
				normalizedVector_: [],
				color_: [],
				//...
			},
			spot: {}
		};
		scene._allTextures = [];
		scene.addMesh = function (name, element, attributes, material) {
			if (typeof name !== "string") {
				console.error("Element name in not string");
			} else {
				if (scene.meshes[name] === undefined) {
					scene.meshes[name] = cloneObject(element);
					var s = scene.meshes[name];
					s.material = { uniforms: {}, materialData: material[0].uid, textures: {} };
					s.name = name;
					if (attributes) {
						if (attributes.position) {
							var p = attributes.position;
							s.position = [s.position[0] + p[0], s.position[1] + p[1], s.position[2] + p[2]];
						};
						if (attributes.size) {
							var p = attributes.size;
							s.size = [s.size[0] * p[0], s.size[1] * p[1], s.size[2] * p[2]];
						}
						if (attributes.rotate) {
							var p = attributes.rotate;
							s.rotate = [s.rotate[0] + p[0], s.rotate[1] + p[1], s.rotate[2] + p[2]];
						}

						sys.Matrix4.set_size(s.Matrix, s.size);
						sys.Matrix4.set_position(s.Matrix, s.position);

						sys.Matrix4.rotateX(s.Matrix, s.rotate[0]);
						sys.Matrix4.rotateY(s.Matrix, s.rotate[1]);
						sys.Matrix4.rotateZ(s.Matrix, s.rotate[2]);
						sys.Matrix4.rotateX(s.NormalMatrix, s.rotate[0]);
						sys.Matrix4.rotateY(s.NormalMatrix, s.rotate[1]);
						sys.Matrix4.rotateZ(s.NormalMatrix, s.rotate[2]);
					}
				} else {
					console.warn("the name of \"" + name + "\" is already occupied");
				}
			}
		};
		scene.addCamera = function (name, camera) {
			scene.camera = camera;
			var camera = scene.camera;
			camera.name = name;

			if (par.sceneParam) {
				if (par.sceneParam.autoResize && par.sceneParam.autoResize === true) {
					window.onresize = function () {
						tthis.width = window.innerWidth; tthis.height = window.innerHeight;
						canvas.width = tthis.width; canvas.height = tthis.height;
						camera.setProjectionMatrix(camera.angleInDeg, tthis.width / tthis.height, scene.camera.near, scene.camera.far);
						scene.sceneUniforms[0] = { name: "CameraMat", value: scene.camera, link: "resultMatrix", type: "mat4" };
					}; 
				}
			}
		};
		scene.draw = function (viewPort) {
			gl.enable(gl.DEPTH_TEST);
			if (scene.shadowSetting.type === 21) {
				sys.useProgram(scene._shaders["ShadowShader"]);
				scene.lights.direction.forEach(function (light) {
					//ShadowShader
					if (light.shadow && light.shadow.enable === 1) {
						light.shadow.splits.forEach(function (split, number) {
							light.shadow.fbsBlurX[number].bind();
							sys.clear([0, 0, 0, 0], "cd");
							sys.render(scene._shaders["ShadowShader"], null, scene,
								[{ name: "position", value: "vertexBuffer", size: 3 }, { value: "indexBuffer" }],
								{
									scene: [{ name: "CameraMat", value: split.camera, link: "resultMatrix", type: "mat4" }],
									element: [{ name: "MoveMat", value: "Matrix", type: "mat4" }],
								},
								[0, 0, light.shadow.fbsBlurX[number].size[0], light.shadow.fbsBlurX[number].size[1]]);
							light.shadow.fbsBlurX[number].unbind();
						});
					}
				});
				sys.useProgram(scene.blurShadow);
				scene.lights.direction.forEach(function (light) {
					//ShadowShader
					if (light.shadow && light.shadow.enable === 1) {
						light.shadow.splits.forEach(function (split, number) {
							sys.postProcessFunction(scene.blurShadow, light.shadow.fbsBlurX[number], [1, 0], light.shadow.fbsBlurY[number]);
							sys.postProcessFunction(scene.blurShadow, light.shadow.fbsBlurY[number], [0, 1], light.shadow.fbs[number]);
						});
					}
				});
			} else {
				sys.useProgram(scene._shaders["ShadowShader"]);
				scene.lights.direction.forEach(function (light) {
					//ShadowShader
					if (light.shadow && light.shadow.enable === 1) {
						light.shadow.splits.forEach(function (split, number) {
							light.shadow.fbs[number].bind();
							sys.clear([0, 0, 0, 0], "cd");
							sys.render(scene._shaders["ShadowShader"], null, scene,
								[{ name: "position", value: "vertexBuffer", size: 3 }, { value: "indexBuffer" }],
								{
									scene: [{ name: "CameraMat", value: split.camera, link: "resultMatrix", type: "mat4" }],
									element: [{ name: "MoveMat", value: "Matrix", type: "mat4" }],
								},
								[0, 0, light.shadow.fbs[number].size[0], light.shadow.fbs[number].size[1]]);
							light.shadow.fbs[number].unbind();
						});
					}
				});
			}
			//if(scene.shadowSetting.blur)
/*			scene.lights.direction.forEach(function (light) {
				if (light.shadow && light.shadow.enable === 1 && light.shadow.blur == true) {
					light.shadow.splits.forEach(function (split, number) {
						sys.postProcessFunction(sys.blurShadow, light.shadow.fbs[number], [1, 0], light.shadow.fbsBlur[number]);
						sys.postProcessFunction(sys.blurShadow, light.shadow.fbsBlur[number], [0, 1], light.shadow.fbs[number]);
					});
				}
			});*/
			sys.clear([0.65, 0.65, 0.65, 1], "cd");
			scene._allMaterials.forEach(function (mater, num) {
				sys.useProgram(scene._shaders["Shader_" + num]);
				sys.render(scene._shaders["Shader_" + num],"_materialShaderFlag" , scene,
				[{ name: "position", value: "vertexBuffer", size: 3 }, { name: "normal", value: "normalBuffer", size: 3 },
				 { name: "uv", value: "uvBuffer", size: 2 }, { value: "indexBuffer" }],
				{
					scene: scene.sceneUniforms, globalTextures: scene.globalTextures,
					element: [{ name: "MoveMat", value: "Matrix", type: "mat4" }, { name: "NormalMat", value: "NormalMatrix", type: "mat4" }],
					dynamic: [["material", "uniforms"]],
					textures: [["material", "textures"]]
				},
				[0, 0, tthis.width,tthis.height]);
			});	
			/*sys.useProgram(sys.resultShader);
			sys.postProcessFunctionDraw(sys.resultShader, scene.lights.direction[0].shadow.fbs[0], [0, 0], [512, 512]);*/
		};
		scene.rotateMesh = function (name, axis) {
			var m = scene.meshes[name];
			m.rotate = [m.rotate[0] + axis[0], m.rotate[1] + axis[1], m.rotate[2] + axis[2]]
			sys.Matrix4.rotateX(m.Matrix, axis[0]);
			sys.Matrix4.rotateY(m.Matrix, axis[1]);
			sys.Matrix4.rotateZ(m.Matrix, axis[2]);
			sys.Matrix4.rotateX(m.NormalMatrix, axis[0]);
			sys.Matrix4.rotateY(m.NormalMatrix, axis[1]);
			sys.Matrix4.rotateZ(m.NormalMatrix, axis[2]);
		};
		scene.addLight = function (light) {
		//console.log(light)
			if (light.type === "direction") {
				scene.lights.direction.push(light);
				var shadowSetting = scene.shadowSetting;
				//console.log(shadowSetting)
				var light = scene.lights.direction[scene.lights.direction.length - 1];
				if (light.shadowOption && light.shadowOption.enable === true) {
					light.shadow = { enable: 1, far_bound: [], splits: [], fbs: [], fbsBlurX: [], fbsBlurY: [], resultMatrix: [], bias: light.shadowOption.bias || 0.0027, normalBias: light.shadowOption.normalBias || 0.05 }
					for (var i = 0; i < shadowSetting.splitForDirectionLight; i++) {
						light.shadow.splits.push({ neard: 0, fard: 0, });
					};
					sys.updateSplits(light.shadow.splits, light.shadowOption.camera.near, light.shadowOption.distantion, i, light.shadowOption.koef);
					//console.log(light.shadow.splits[0].fard)
					var cam_pos = light.shadowOption.camera.position;
					var view_dir = sys.Vector3.normalize(light.shadowOption.camera.direction);

					for (var i = 0; i < shadowSetting.splitForDirectionLight; i++) {
						//light.shadow.far_bound.push(light.shadow.splits[i].fard);
						light.shadow.far_bound.push(sys.Matrix4.multMatrixAndVector(light.shadowOption.camera.matrix, [0, 0, -light.shadow.splits[i].fard, 1])[2]);
						var shadowSize = light.shadowOption.size;

						if (shadowSetting.IOQWAIIS === true) {
							shadowSize = light.shadowOption.size / Math.pow(2, i);
						}
						var type = "UNSIGNED_BYTE";
						var rr = "RGBA";
						if (shadowSetting.bitsPerChanel === 4) { type = "HALF_FLOAT";};
						if (shadowSetting.bitsPerChanel === 8) type = "FLOAT";
						if (shadowSetting.type === 21) {
							var dr = 1;
							if (shadowSetting.devideTexture === true) { dr = 2; }
							light.shadow.fbsBlurX.push(sys.framebuffer(sys.texture(shadowSize, shadowSize, type, rr), true, false));
							light.shadow.fbsBlurY.push(sys.framebuffer(sys.texture(shadowSize / dr, shadowSize / dr, type, rr), false, false));
							light.shadow.fbs.push(sys.framebuffer(sys.texture(shadowSize / dr, shadowSize / dr, type, rr), false, false));
							light.shadow.blur = true;
						} else {
							light.shadow.fbs.push(sys.framebuffer(sys.texture(shadowSize, shadowSize, type, rr), true, false));
						}
						light.shadow.splits[i].cameraPosition = sys.rotatePoint(light.directionAngle, sys.Vector3.sum(cam_pos, [0, 1, 0.0001]), cam_pos);
						light.shadow.splits[i].camera = sys.createCamera(light.shadow.splits[i].cameraPosition, [cam_pos], { type: "orthogonal", aspect: -1, width: 1, height: 1, nearPlane: 1, farPlane: 1 });
						//console.log(light.shadow.splits[i].cameraPosition, [cam_pos])
						var d = light.shadowOption.ds || 1;
						var fd = light.shadow.splits[i].fard - light.shadow.splits[i].neard;
						light.shadow.splits[i].camera.setProjectionMatrix(-fd * d, fd * d, -fd * d, fd * d,
										sys.Vector3.sizeVector(cam_pos) - fd * 2,
										sys.Vector3.sizeVector(cam_pos) + fd * 2);
						//light.shadow.splits[i].camera.setProjectionMatrix(-10,10, -10,10,-50,50);	 
						//console.log((sys.Vector3.sizeVector(cam_pos) - fd),(sys.Vector3.sizeVector(cam_pos) + fd))
						_Concat(light.shadow.resultMatrix, light.shadow.splits[i].camera.resultMatrix);	
					}
				}
				var lightForRender = scene.lightForDefaultRender.direction;
				_Concat(lightForRender.color_, light.color);
				_Concat(lightForRender.vector_, light.vector);
				_Concat(lightForRender.normalizedVector_, light.normalizedVector);
			};
		};
		scene.updateShadowSetting = function (newSetting) {
			var p = newSetting;
			scene.shadowSetting = {
				type: p.type || "hard",
				blurScale: p.blurScale || 3,
				bitsPerChanel: p.bitsPerChanel || 2,
				splitForDirectionLight: p.splitForDirectionLight || 1,
				encodeTexture: p.encodeTexture || false,
				IOQWAIIS: p.IOQWAIIS || false,
				devideTexture: p.devideTexture || true
			};
			if (typeof scene.shadowSetting.encodeTexture == "string") {
				if (scene.shadowSetting.encodeTexture == "true") {
					scene.shadowSetting.encodeTexture = true;
				} else {
					scene.shadowSetting.encodeTexture = false;
				}
			}
		};
		scene.updateLights = function () {
			scene.lightForDefaultRender.direction = {
				vector_: [],
				normalizedVector_: [],
				color_: [],
			};
			scene.lights.direction.forEach(function (light) {
				var lightForRender = scene.lightForDefaultRender.direction;
				_Concat(lightForRender.color_, light.color);
				_Concat(lightForRender.vector_, light.vector);
				_Concat(lightForRender.normalizedVector_, light.normalizedVector);
			});
			//...
			scene.sceneUniforms[3] = { name: "directionLight.color", value: scene.lightForDefaultRender.direction, link: "color_", type: "vec4" };
			//scene.updateShadow();
		}
		scene.updateShadow = function () {
			var shadowSetting = scene.shadowSetting;
			scene.lights.direction.forEach(function (light) {
				if (light.shadowOption && light.shadowOption.enable === true) {
					light.shadow.fbs.forEach(function (tex) {
						gl.deleteTexture(tex.texture);
						gl.deleteFramebuffer(tex.fb);
						if (tex.renderBuffer) {
							gl.deleteRenderbuffer(tex.renderBuffer);
						}
					});
					light.shadow.fbsBlurX.forEach(function (tex) {
						gl.deleteTexture(tex.texture);
						gl.deleteFramebuffer(tex.fb);
						if (tex.renderBuffer) {
							gl.deleteRenderbuffer(tex.renderBuffer);
						}
					});
					light.shadow.fbsBlurY.forEach(function (tex) {
						gl.deleteTexture(tex.texture);
						gl.deleteFramebuffer(tex.fb);
						if (tex.renderBuffer) {
							gl.deleteRenderbuffer(tex.renderBuffer);
						}
					});
					light.shadow = { enable: 1, far_bound: [], splits: [], fbs: [], fbsBlurX: [], fbsBlurY: [], resultMatrix: [], bias: light.shadowOption.bias || 0.0027, normalBias: light.shadowOption.normalBias || 0.05 }
					for (var i = 0; i < shadowSetting.splitForDirectionLight; i++) {
						light.shadow.splits.push({ neard: 0, fard: 0, });
					};
					sys.updateSplits(light.shadow.splits, light.shadowOption.camera.near, light.shadowOption.distantion, i, light.shadowOption.koef);
					//console.log(light.shadow.splits[0].fard)
					var cam_pos = light.shadowOption.camera.position;
					var view_dir = sys.Vector3.normalize(light.shadowOption.camera.direction);

					for (var i = 0; i < shadowSetting.splitForDirectionLight; i++) {
						//light.shadow.far_bound.push(light.shadow.splits[i].fard);
						light.shadow.far_bound.push(sys.Matrix4.multMatrixAndVector(light.shadowOption.camera.matrix, [0, 0, -light.shadow.splits[i].fard, 1])[2]);
						var shadowSize = light.shadowOption.size;

						if (shadowSetting.IOQWAIIS === true) {
							shadowSize = light.shadowOption.size / Math.pow(2, i);
						}
						var type = "UNSIGNED_BYTE";
						var rr = "RGBA";
						if (shadowSetting.bitsPerChanel == 4) type = "HALF_FLOAT";
						if (shadowSetting.bitsPerChanel == 8) type = "FLOAT";
						if (shadowSetting.type === 21) {
							var dr = 1;
							if (shadowSetting.devideTexture === true) { dr = 2; }
							light.shadow.fbsBlurX.push(sys.framebuffer(sys.texture(shadowSize, shadowSize, type, rr), true, false));
							light.shadow.fbsBlurY.push(sys.framebuffer(sys.texture(shadowSize / dr, shadowSize / dr, type, rr), false, false));
							light.shadow.fbs.push(sys.framebuffer(sys.texture(shadowSize / dr, shadowSize / dr, type, rr), false, false));
							light.shadow.blur = true;
						} else {
							light.shadow.fbs.push(sys.framebuffer(sys.texture(shadowSize, shadowSize, type, rr), true, false));
						}
						light.shadow.splits[i].cameraPosition = sys.rotatePoint(light.directionAngle, sys.Vector3.sum(cam_pos, [0, 1, 0.0001]), cam_pos);
						light.shadow.splits[i].camera = sys.createCamera(light.shadow.splits[i].cameraPosition, [cam_pos], { type: "orthogonal", aspect: -1, width: 1, height: 1, nearPlane: 1, farPlane: 1 });
						//console.log(light.shadow.splits[i].cameraPosition, [cam_pos])
						var d = light.shadowOption.ds || 1;
						var fd = light.shadow.splits[i].fard - light.shadow.splits[i].neard;
						light.shadow.splits[i].camera.setProjectionMatrix(-fd * d, fd * d, -fd * d, fd * d,
										sys.Vector3.sizeVector(cam_pos) - fd * 2,
										sys.Vector3.sizeVector(cam_pos) + fd * 2);
						//light.shadow.splits[i].camera.setProjectionMatrix(-10,10, -10,10,-50,50);	 
						//console.log((sys.Vector3.sizeVector(cam_pos) - fd),(sys.Vector3.sizeVector(cam_pos) + fd))
						_Concat(light.shadow.resultMatrix, light.shadow.splits[i].camera.resultMatrix);
					}
				}
			});
			//light.shadow = {};
			//scene.sceneUniforms[3] = { name: "directionLight.color", value: scene.lightForDefaultRender.direction, link: "color_", type: "vec4" };
		}
		return scene;
	}
	sys.clr =
	{
		c: gl.COLOR_BUFFER_BIT,
		d: gl.DEPTH_BUFFER_BIT,
		cd: gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT
	}
	sys.clear = function (clearColor, clear) {
		gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]); gl.clearDepth(1.0);
		gl.clear(sys.clr[clear]);
	};
	function ff(obj, l) {
		var t = obj[l[0]];
		for (var i = 1; i < l.length; i++) {
			t = t[l[i]];
		}
		return t;
	};
	sys.render = function (program, programFlag, scene, attibutes, uniforms, viewPort) {
		/*
		  attributes=[{name:"position",value:"VertexBuffer",size:3},{name:"normal",value:"NormalBuffer",size:3},{value:"IndexBuffer"}]
		  uniforms=
		  {
			scene:[{name:"CameraMat",value:_MATRIX4_,type:"mat4"},{name:"lightPos",value:_VECTOR3_,type:"vec3",...,}}],
			element:[{name:"MoveMat",value:"Matrix",type:"mat4"},{name:"NormalMat",value:"NormalMatrix",type:"mat4"}]
		  }
		*/
		v(viewPort[0], viewPort[1], viewPort[2], viewPort[3]);
		var len = attibutes.length - 1;
		for (var i = 0; i < len; i++) {
			program.enableAttribute(attibutes[i].name);
		};
		if (uniforms.scene) {
			alob(uniforms.scene, function (a) {
				sys.setUniform(program.uniforms[a.name], a.value[a.link], a.type);
				//console.log(a.name, a.value[a.link], a.type)
			});
		};
		if (uniforms.globalTextures) {
			uniforms.globalTextures.forEach(function (texture) {
				sys.activeTexture(texture.texture.texture, program.uniforms[texture.uniform], texture.number);
			});
		}
		alob(scene.meshes, function (m) {
			if (m[programFlag] === program.programFlag || programFlag===null) {
				alob(uniforms.element, function (a) {
					sys.setUniform(program.uniforms[a.name], m[a.value], a.type);
				});
				for (var i = 0; i < len; i++) {
					var a = attibutes[i];
					if (m[a.value]) {
						sys.setVertex(program.attributes[a.name], m[a.value], a.size);
					} else {
						program.disableAttribute(attibutes[i].name);
					}
				};
				if (uniforms.dynamic) {
					alob(uniforms.dynamic, function (a) {
						var un = ff(m, a);
						alob(un, function (b, q) {
							sys.setUniform(program.uniforms[q], b.value, b.type);
						});
					});
				};
				if (m.uvBuffer) {
					var textureUnit = (scene.allShadowTextures + 1) * 3;
					if (uniforms.textures) {
						alob(uniforms.textures, function (a) {
							var un = ff(m, a);
							alob(un, function (b, q) {
								sys.activeTexture(b.texture.texture, program.uniforms[b.uniform.value], textureUnit + 1)
								textureUnit++;
							});
						});
					};
				};
				sys.bindIndex(m[attibutes[len].value]);
				sys.drawElement(m.len);
			}
		});
		for (var i = 0; i < len; i++) {
			program.disableAttribute(attibutes[i].name);
		};
	};
	/*SYSTEM*/
	sys.createBuffer = function (value, type) {
		var buffer = gl.createBuffer();
		gl.bindBuffer(gl[type], buffer);
		if (type == "ARRAY_BUFFER") {
			gl.bufferData(gl[type], new Float32Array(value), gl.STATIC_DRAW);
		} else {
			gl.bufferData(gl[type], new Uint32Array(value), gl.STATIC_DRAW);
		}
		return buffer;
	};
	sys.texture = function (width, height, type, format) {
		var texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		var typ;
		if (type === "HALF_FLOAT") typ = sys.halfTexture.HALF_FLOAT_OES;
		if (type === "FLOAT") typ = gl.FLOAT;
		if (type === "UNSIGNED_BYTE") typ = gl.UNSIGNED_BYTE;
		if (sys.anisotropic) {
			gl.texParameterf(gl.TEXTURE_2D, sys.anisotropic.filter.TEXTURE_MAX_ANISOTROPY_EXT, sys.anisotropic.param);
		}
		if (format == "depth") {
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, width, height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);
			texture.type = "DEPTH_COMPONENT";
		} else {
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl[format], typ, null);
			texture.type = format;
		}
		gl.bindTexture(gl.TEXTURE_2D, null);
		texture.size = [width, height];
		return texture;
	};
	var fbTexNum = 0;
	sys.framebuffer = function (colorTexture, useRenderBuffer, depthTexture) {
		var renderBuffer = undefined;
		var framebuffer = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
		if (!Array.isArray(colorTexture)) {
			if (colorTexture !== false) {
				gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTexture, 0);
				if (depthTexture && depthTexture === true) {
					gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);
				} else {
					if (useRenderBuffer && useRenderBuffer === true) {
						var rb = gl.createRenderbuffer();
						gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
						gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, colorTexture.size[0], colorTexture.size[1]);
						gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb);
						renderBuffer = rb;
					}
				}
			}
		} else {
			var nn = colorTexture.length, mas = [];
			colorTexture.forEach(function (tex, n) {
				gl.framebufferTexture2D(gl.FRAMEBUFFER, sys.drawBuffer.COLOR_ATTACHMENT0_WEBGL + n, gl.TEXTURE_2D, tex, 0);
				mas.push(sys.drawBuffer.COLOR_ATTACHMENT0_WEBGL + n);
			});
			sys.drawBuffer.drawBuffersWEBGL(mas);
			if (useRenderBuffer && useRenderBuffer === true) {
				var rb = gl.createRenderbuffer();
				gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
				gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, colorTexture[0].size[0], colorTexture[0].size[1]);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb);
				renderBuffer = rb;
			}
		}
		gl.bindTexture(gl.TEXTURE_2D, null);
		gl.bindFramebuffer(gl.FRAMEBUFFER, null);
		var res = { fb: framebuffer, number: fbTexNum };
		fbTexNum++;
		return {
			fb: res.fb, texture: colorTexture, number: res.number, size: colorTexture.size || colorTexture[0].size, depthTexture: depthTexture,
			bind: function () {
				gl.bindFramebuffer(gl.FRAMEBUFFER, res.fb);
			}, unbind: function () {
				gl.bindFramebuffer(gl.FRAMEBUFFER, null);
			}, unbindTexture: function () {
				gl.bindTexture(gl.TEXTURE_2D, null);
			},renderBuffer:renderBuffer
		};
	};
	sys.createdTexturesURL = []; sys.createdTextures = [];
	sys.imageTexture = function (image_URL, callback) {
		//console.warn("loading: " + image_URL);
		var textureLoading = false;
		for (var i = 0; i < sys.createdTextures.length; i++) {
			if (sys.createdTexturesURL[i] === image_URL) {
				textureLoading = true;
			}
		}

		if (textureLoading === true) {
			var a = setInterval(function () {
				if (sys.createdTextures[image_URL]) {
					callback(sys.createdTextures[image_URL]);
					clearInterval(a);
				}
			}, 300);
		} else {
			var image = new Image();
			sys.createdTexturesURL.push(image_URL);
			image.src = image_URL;
			image.onload = function (e) {
				var texture = gl.createTexture();
				gl.bindTexture(gl.TEXTURE_2D, texture);
				gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
				gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
				gl.generateMipmap(gl.TEXTURE_2D);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
				if (sys.anisotropic) { gl.texParameterf(gl.TEXTURE_2D, sys.anisotropic.filter.TEXTURE_MAX_ANISOTROPY_EXT, sys.anisotropic.param); }
				gl.bindTexture(gl.TEXTURE_2D, null);
				sys.createdTextures[image_URL] = texture;
				//console.warn("OK: " + image_URL);
				callback(texture);
			};
		}
	}
	sys.createShaderFunction = function (value, type) {
		var shader = gl.createShader(type);
		gl.shaderSource(shader, value);
		gl.compileShader(shader);
		if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
			alert(" SHADER : " + gl.getShaderInfoLog(shader));
		}
		return shader;
	};
	sys.createdShader=0;
	sys.createShader = function (vs, fs, attributes, uniforms) {
		var shader = {};
		shader.program = gl.createProgram();
		var vs = sys.createShaderFunction(vs, gl.VERTEX_SHADER), fs = sys.createShaderFunction(fs, gl.FRAGMENT_SHADER);
		gl.attachShader(shader.program, vs); gl.attachShader(shader.program, fs);
		gl.linkProgram(shader.program);
		shader.attributes = {}; shader.uniforms = {};
		attributes.forEach(function (attr) {
			shader.attributes[attr] = gl.getAttribLocation(shader.program, attr);
		});
		uniforms.forEach(function (unif) {
			shader.uniforms[unif] = gl.getUniformLocation(shader.program, unif);
		});
		shader.enableAttribute = function (name) {
			gl.enableVertexAttribArray(shader.attributes[name]);
		};
		shader.disableAttribute = function (name) {
			gl.disableVertexAttribArray(shader.attributes[name]);
		};
		shader.disableAllAttributes = function () {
			for (var shadAttr in shader.attributes) gl.disableVertexAttribArray(shader.program, shadAttr);
		};
		shader.programFlag = sys.createdShader;
		sys.createdShader++;
		return shader;
	};
	sys.useProgram = function (prog) { gl.useProgram(prog.program) };
	sys.setVertex = function (link, data, number) {
		gl.bindBuffer(gl.ARRAY_BUFFER, data);
		gl.vertexAttribPointer(link, number, gl.FLOAT, false, 0, 0);
	};
	sys.bindIndex = function (data) {
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, data);
	};
	sys.activeTexture = function (texture, uniform, index) {
		sys.setUniform(uniform, index, "int");
		gl.activeTexture(gl.TEXTURE0 + index);
		gl.bindTexture(gl.TEXTURE_2D, texture);
	}
	sys.drawElement = function (length) {
		gl.drawElements(gl.TRIANGLES, length, gl.UNSIGNED_INT, 0);
	};
	sys.uniformList ={
		vec4: function (u, v) { gl.uniform4fv(u, v) },
		mat4: function (u, v) { gl.uniformMatrix4fv(u, false, v) },
		vec3: function (u, v) { gl.uniform3fv(u, v) },
		floatv: function (u, v) { gl.uniform1fv(u, v) },
		float: function (u, v) { gl.uniform1f(u, v) },
		int: function (u, v) { gl.uniform1i(u, v) },
		intv: function (u, v) { gl.uniform1iv(u, v) },
		sampler2D: function (u, v) { gl.uniform1i(u, v) },
		vec2: function (u, v) { gl.uniform2fv(u, v) },
		mat3: function (u, v) { gl.uniformMatrix3fv(u, false, v) }
	};
	sys.setUniform = function (uniform, value, type) {
		sys.uniformList[type](uniform, value);
	};
	var v = function (x1, y1, w, h) {
		gl.viewport(x1, y1, w, h);
	};
	sys.isEmpty = function (obj) {
		for (var ii in obj) {
			if (obj.hasOwnProperty(ii)) return false;
		}
		return true;
	};
	this.assembly = function (scene, materials) {
		if (scene._shaders) {
			alob(scene._shaders, function (a, n, t) {
				var s = gl.getAttachedShaders(a.program);
				gl.deleteShader(s[0]);
				gl.deleteShader(s[1]);
				gl.deleteProgram(a.program);
			})
		}
		scene._shaders = {};
		scene._allMaterials = cloneObject(materials);
		var vs = "attribute vec3 position,normal;attribute vec2 uv;\n\
uniform mat4 CameraMat,MoveMat,NormalMat;varying vec3 vNormal,vLightPos;varying vec2 uvs;varying vec4 absolutePosition;\n\
void main(){\n\
	absolutePosition=MoveMat*vec4(position,1.0);\n\
	gl_Position=CameraMat*absolutePosition;\n\
	vNormal=normalize(vec3(NormalMat*vec4(normal,1.0)));\n\
	uvs=uv;\n\
}";
		var u = cloneObject(sys.shaderMaterialFunc),
		usable = {};
		alob(u, function (m, n, a) {
			usable[n] = {};
			alob(m, function (t, na) {
				usable[n][t] = false;
			})
		});
		scene.sceneUniforms = [{ name: "CameraMat", value: scene.camera, link: "resultMatrix", type: "mat4" },
		{ name: "directionLight.vector", value: scene.lightForDefaultRender.direction, link: "vector_", type: "vec3" },
		{ name: "directionLight.normalizedVector", value: scene.lightForDefaultRender.direction, link: "normalizedVector_", type: "vec3" },
		{ name: "directionLight.color", value: scene.lightForDefaultRender.direction, link: "color_", type: "vec4" },
		{ name: "cameraPosition", value: scene.camera, link: "position", type: "vec3" }];

		var materialShaderCodeFunction = "";
		var shaderFunctions = "";
		var alluniforms = ["CameraMat", "MoveMat", "NormalMat", "cameraPosition"];

		var dirLightUniform = ["directionLight.vector", "directionLight.normalizedVector", "directionLight.color"];
		_Concat(alluniforms, dirLightUniform);

		var lightConstants = "";
		var lightConstantsCode = "";
		scene.globalTextures = [];
		scene.allShadowTextures = 0;
		scene.allLightCount = 0;
		var codeUniformsShadowMap = "";

		var shadowMapSplit = "";
		//console.log(scene)
		if (scene.lights.direction.length > 0) {
			var splitCount = scene.shadowSetting.splitForDirectionLight;

			lightConstants += "\n#define DIRECTION_LIGHT " + scene.lights.direction.length + "\n";
			lightConstants += "\n#define LIGHT_SPLIT_COUNT " + splitCount + "\n";
			alluniforms.push("shadowMapMatrix_");
			alluniforms.push("shadowMapFar_d_");
			alluniforms.push("shadowMapBias_");
			alluniforms.push("shadowMapNormalBias_");

			shadowMapSplit += "\n\t\tif(dv < shadowMapFar_d_[i*" + splitCount + "+0])shadowCoef*=computeShadow(shadowMapMatrix_[i*" + splitCount + "+0],shadowMap_[i*" + splitCount + "+0],shadowMapBias_[i],shadowMapNormalBias_[i],0.05,lightPos);\n";
			for (var i = 1; i < splitCount - 1; i++) {
				shadowMapSplit += "\t\telse if(dv < shadowMapFar_d_[i*" + splitCount + "+"+ i +"])shadowCoef*=computeShadow(shadowMapMatrix_[i*" + splitCount + "+" + i + "],shadowMap_[i*" + splitCount + "+" + i + "],shadowMapBias_[i],shadowMapNormalBias_[i],0.05,lightPos);\n";
			}
			if (splitCount >= 2) {
				shadowMapSplit += "\t\telse shadowCoef*=computeShadow(shadowMapMatrix_[i*" + splitCount + "+" + i + "],shadowMap_[i*" + splitCount + "+" + i + "],shadowMapBias_[i],shadowMapNormalBias_[i],0.05,lightPos);\n";
			}

			var shadowMatrixes = [],shadowFard=[], shadowBiases=[], shadowNormalBiases=[], shadowEnables=[];
			scene.lights.direction.forEach(function (light) {
				if (light.shadow&&light.shadow.enable===1) {
					var r = scene.allShadowTextures * splitCount;
					for (var i = 0; i < splitCount; i++) {
						alluniforms.push("shadowMap_[" + (r + i) + "]");
						scene.globalTextures.push({ uniform: "shadowMap_[" + (r + i) + "]", number: r + i, texture: light.shadow.fbs[i] });
					}
					_Concat(shadowMatrixes, light.shadow.resultMatrix);
					_Concat(shadowFard, light.shadow.far_bound);
					_Concat(shadowBiases, [light.shadow.bias]);
					_Concat(shadowNormalBiases, [light.shadow.normalBias]);
					_Concat(shadowEnables, [light.shadow.enable]);

					scene.allShadowTextures++;
				}
			});
			scene.sceneUniforms.push({ name: "shadowMapMatrix_", value: { d: shadowMatrixes }, link: "d", type: "mat4" });
			scene.sceneUniforms.push({ name: "shadowMapFar_d_", value: { d: shadowFard }, link: "d", type: "floatv" });
			scene.sceneUniforms.push({ name: "shadowMapBias_", value: { d: shadowBiases }, link: "d", type: "floatv" });
			scene.sceneUniforms.push({ name: "shadowMapNormalBias_", value: { d: shadowNormalBiases }, link: "d", type: "floatv" });
			scene.sceneUniforms.push({ name: "shadowMapEnable_", value: { d: shadowEnables }, link: "d", type: "intv" });


			codeUniformsShadowMap += "uniform sampler2D shadowMap_[" + (scene.allShadowTextures * splitCount) + "];";
			codeUniformsShadowMap += "uniform mat4 shadowMapMatrix_[" + (scene.allShadowTextures * splitCount) + "];\n";
			codeUniformsShadowMap += "uniform float shadowMapBias_[" + (scene.allShadowTextures) + "];\n";
			codeUniformsShadowMap += "uniform float shadowMapNormalBias_[" + (scene.allShadowTextures) + "];\n";
			codeUniformsShadowMap += "uniform int shadowMapEnable_[" + (scene.allShadowTextures) + "];\n";
			codeUniformsShadowMap += "uniform float shadowMapFar_d_[" + (scene.allShadowTextures * splitCount) + "];\n";

			scene.allLightCount++;
		}
		//console.log(scene.sceneUniforms)
		var lightStructure = "\n\
#ifdef DIRECTION_LIGHT\n\
struct LightDirectionStruct_system\n\
{\n\
	vec4 color[DIRECTION_LIGHT];\n\
	vec3 vector[DIRECTION_LIGHT];\n\
	vec3 normalizedVector[DIRECTION_LIGHT];\n\
	mat4 matrix[DIRECTION_LIGHT];\n\
	int enable[DIRECTION_LIGHT];\n\
	int enableShadow[DIRECTION_LIGHT];\n\
	float bias[DIRECTION_LIGHT];\n\
};uniform LightDirectionStruct_system directionLight;\
\n#endif\n";

		var so = scene.shadowSetting;
		//console.log(so);
		var shadow={ };
		
		var sfe = "";
		switch (so.type) {
			//computeShadow(mat4 projMat, sampler2D sm, float bias, float normalBias, float minValue, vec3 lightPos)...
			case 18: { //hard
				if (so.encodeTexture === true) {
					shadow.shadowMapFunction = "gl_FragColor=vec4(packHalf(z),0,1.0);";
					shadow.generalShaderFunction = "vec4 sam=texture2D(sm,uu.xy);if(uu.z>unpackHalf(sam.xy)+bias){return minValue;}return 1.0;";
				} else {
					shadow.shadowMapFunction = "gl_FragColor=vec4(z,0,0,1.0);";
					shadow.generalShaderFunction = "vec4 sam=texture2D(sm,uu.xy);if(uu.z>sam.x+bias){return minValue;}return 1.0;";
				}
			}; break;
			case 19: {//pcf
				if (so.encodeTexture === true) {
					shadow.shadowMapFunction = "gl_FragColor=vec4(packHalf(z),0,1.0);"
					shadow.generalShaderFunction = "float col=0.0; vec3 color=vec3(0.0);\
const float b=" + (so.blurScale.toString().split(".")[0]) + ".0;for(float x=-b;x<=b;x++)\
{for(float y=-b;y<=b;y++){vec4 sam=texture2D(sm,uu.xy+vec2(1.0/2048.0)*vec2(x,y));\
if(uu.z>unpackHalf(sam.xy)+bias){color+=minValue;}else{color+=1.0;}col++;}}return color.x/col;";
				} else {
					shadow.shadowMapFunction = "gl_FragColor=vec4(z,0,0,1.0);";
					shadow.generalShaderFunction = "float col=0.0; vec3 color=vec3(0.0);\
const float b=" + (so.blurScale.toString().split(".")[0]) + ".0;for(float x=-b;x<=b;x++)\
{for(float y=-b;y<=b;y++){vec4 sam=texture2D(sm,uu.xy+vec2(1.0/2048.0)*vec2(x,y));\
if(uu.z>sam.x+bias){color+=minValue;}else{color+=1.0;}col++;}}return color.x/col;";
				}
			}; break;
			case 20: {//vsm
				if (so.encodeTexture === true) {
					shadow.shadowMapFunction = "float moment1 = z;float moment2 = moment1 * moment1;\
float dx = dFdx(moment1);float dy = dFdy(moment1);gl_FragColor = vec4(packHalf(moment1),packHalf(moment2+0.25*(dx*dx+dy*dy)));"
					shadow.generalShaderFunction = "vec4 sam=texture2D(sm,uu.xy);vec2 moments=vec2(unpackHalf(sam.xy),unpackHalf(sam.zw));\
float p = smoothstep(uu.z-bias, uu.z, moments.x);\
float variance = moments.y-moments.x * moments.x;\
float d = uu.z-moments.x;\
float p_max = linstep(0.2,1.0,variance/(variance+d*d));\
return max(minValue,max(p, p_max));\
";
				} else {
					shadow.shadowMapFunction = "float moment1 = z;float moment2 = moment1 * moment1;\
float dx = dFdx(moment1);float dy = dFdy(moment1);gl_FragColor = vec4(moment1,moment2+0.25*(dx*dx+dy*dy),0,1);";
					shadow.generalShaderFunction = "vec4 sam=texture2D(sm,uu.xy);vec2 moments=sam.xy;\
float p = smoothstep(uu.z-bias, uu.z, moments.x);\
float variance = moments.y-moments.x * moments.x;\
float d = uu.z-moments.x;\
float p_max = linstep(0.2,1.0,variance/(variance+d*d));\
return max(minValue,max(p, p_max));\
";
				}

			}; break;
			case 21: {//bluredvsm
				if (so.encodeTexture === true) {
					shadow.shadowMapFunction = "float moment1 = z;float moment2 = moment1 * moment1;\
float dx = dFdx(moment1);float dy = dFdy(moment1);gl_FragColor = vec4(packHalf(moment1),packHalf(moment2+0.25*(dx*dx+dy*dy)));";
					shadow.generalShaderFunction = "vec4 sam=texture2D(sm,uu.xy);vec2 moments=vec2(unpackHalf(sam.xy),unpackHalf(sam.zw));\
float p = smoothstep(uu.z-bias, uu.z, moments.x);\
float variance = moments.y-moments.x * moments.x;\
float d = uu.z-moments.x;\
float p_max = linstep(0.2,1.0,variance/(variance+d*d));\
return max(minValue,max(p, p_max));\
";
					var ffs = "#define INV_SQRT_2PI_X3 1.1968268412042980338198381798031\n\
precision highp float;uniform sampler2D sampler;uniform vec2 direction,resolution;varying vec2 uvs;\
float unpackHalf(vec2 color){return color.x + (color.y / 255.0);}vec2 packHalf(float depth){const vec2 bitOffset = vec2(1.0 / 255., 0.);\
vec2 color = vec2(depth, fract(depth * 255.));return color - (color.yy * bitOffset);}const float r=" + so.blurScale + ".0;\
void main(){\
\
float exp_value=-4.5/r/r;float sqrt_value=INV_SQRT_2PI_X3/r;float sum=0.0;\
vec2 value=vec2(0.0);for(float x=1.0;x<=r;x++){float currentScale=exp(exp_value*x*x);sum+=currentScale;\
vec2 dudv=direction/resolution*x;\
vec4 tex1=texture2D(sampler,uvs-dudv);vec4 tex2=texture2D(sampler,uvs+dudv);\
value+=currentScale*(vec2(unpackHalf(tex1.xy),unpackHalf(tex1.zw))+vec2(unpackHalf(tex2.xy),unpackHalf(tex2.zw)));}\
float correction=1.0/sqrt_value-2.0*sum;\
vec4 tt=texture2D(sampler,uvs);value+=vec2(unpackHalf(tt.xy),unpackHalf(tt.zw))*correction;vec2 ret=value*sqrt_value;\
gl_FragColor=vec4(packHalf(ret.x),packHalf(ret.y));\
}";

					scene.blurShadow = sys.createShader("attribute vec3 position;varying vec2 uvs;\n\
void main(){gl_Position=vec4(position,1.0);uvs=(position.xy*0.5+0.5);}",ffs,["position"], ["resolution", "direction", "sampler"]);
				} else {
					shadow.shadowMapFunction = "float moment1 = z;float moment2 = moment1 * moment1;\
float dx = dFdx(moment1);float dy = dFdy(moment1);gl_FragColor = vec4(moment1,moment2+0.25*(dx*dx+dy*dy),0,1);";
					shadow.generalShaderFunction = "vec4 sam=texture2D(sm,uu.xy);vec2 moments=sam.xy;\
float p = smoothstep(uu.z-bias, uu.z, moments.x);\
float variance = moments.y-moments.x * moments.x;\
float d = uu.z-moments.x;\
float p_max = linstep(0.2,1.0,variance/(variance+d*d));\
return max(minValue,max(p, p_max));\
";
					scene.blurShadow = sys.createShader("attribute vec3 position;varying vec2 uvs;\n\
void main(){gl_Position=vec4(position,1.0);uvs=(position.xy*0.5+0.5);}",
	"#define INV_SQRT_2PI_X3 1.1968268412042980338198381798031\nprecision highp float;uniform sampler2D sampler;uniform vec2 direction,resolution;varying vec2 uvs;\
const float r=" + so.blurScale + ".0;\nvoid main(){float exp_value=-4.5/r/r;float sqrt_value=INV_SQRT_2PI_X3/r;float sum=0.0;\
vec4 value=vec4(0.0);for(float x=1.0;x<=r;x++){float currentScale=exp(exp_value*x*x);sum+=currentScale;\
vec2 dudv=direction/resolution*x;value+=currentScale*(texture2D(sampler,uvs-dudv)+texture2D(sampler,uvs+dudv));}\
float correction=1.0/sqrt_value-2.0*sum;value+=texture2D(sampler,uvs)*correction;gl_FragColor=value*sqrt_value;}",
	["position"], ["resolution", "direction", "sampler"]);
				}
			}; break;
		}
		scene._allMaterials.forEach(function (material, n) {
			var preLightCode = "";
			var uniformString = "";
			material.forEach(function (nod) {
				var sp=nod.node.type.split(".");
				if (usable[sp[0]][sp[1]] === false) {
					shaderFunctions += nod.sys.shaderFunction;
					usable[sp[0]][sp[1]] = true;
				};
				alob(nod.sys.uniforms, function (a, t) {
					uniformString += "uniform " + a.type + " " + t + ";";
					alluniforms.push(t);
				});
				if (nod.sys.light) {
					preLightCode += "\t" + nod.sys.preLightCode;
				}
			});
			alob(scene.meshes, function (mesh) {
				var materialUID = mesh.material.materialData;
				if (material[0].uid === materialUID) {
					material.forEach(function (nod) {
						//console.log(nod)
						if (nod.sys.type === "sampler2D") {
							alob(nod.sys.uniforms, function (a, t) {
								mesh.material.textures[nod.sys.link] = { texture: sys.preTexture[nod.sys.link], uniform: { value: t, type: a.type } };
								//console.log(mesh.material)
							});
						} else {
							alob(nod.sys.uniforms,function(a,t){
								mesh.material.uniforms[t] = { value: a.value, type: a.type };
							});
						}
					});
				}
			});
			var fs = "#extension GL_OES_standard_derivatives : enable\n\
" + lightConstants + "precision highp float;varying vec3 vNormal,vLightPos;varying vec2 uvs;uniform vec3 cameraPosition;uniform mat4 NormalMat;varying vec4 absolutePosition;vec4 emissionParamether=vec4(0.0);\n\
" + uniformString + "\n\n\n" + codeUniformsShadowMap + lightStructure + "\n\
float unpackHalf(vec2 color)\
{\
return color.x + (color.y / 255.0);\
}\n\n\n\
float linstep(float low, float high, float v){\
return clamp((v-low)/(high-low),0.0,1.0);\
}float computeShadow(mat4 projMat, sampler2D sm, float bias, float normalBias, float minValue,vec3 lightPos){\n\
vec3 wPos = absolutePosition.xyz + vNormal * normalBias * clamp(dot(vNormal, lightPos), 0.0, 1.0);\n\
vec4 u=projMat*vec4(wPos,1.0);vec3 uu=u.xyz/u.w;uu=uu*0.5+0.5;\n\
if(uu.x<0.001||uu.x>0.999||uu.y<0.001||uu.y>0.999||uu.z>=0.999){return 1.0;}\n\
" + shadow.generalShaderFunction + "\n\
\
}\n\n\n\
" + shaderFunctions + "\n\
void main(){\n\
	float dv=gl_FragCoord.z/gl_FragCoord.w;\n\
	for(int i=0;i<DIRECTION_LIGHT;i++)\n\
	{\n\
		vec3 lightPos=directionLight.normalizedVector[i];\n\
		vec4 lightColor=directionLight.color[i];\n\
		float shadowCoef=1.0;\n\
		"+ shadowMapSplit +"\n\
	" + preLightCode + "\n\
		\n\
		/*vec4 u=shadowMapMatrix_[3]*absolutePosition;vec3 uu=u.xyz/u.w;uu=uu*0.5+0.5;\n\
		diffuseParamether=texture2D(shadowMap_[3],uu.xy);*/\n\
	}\n\
	gl_FragColor=" + material[material.length - 1].sys.code + ";\n\
	gl_FragColor.xyz+=emissionParamether.xyz;\
	/*const int sc=2;\
	const int sp=1;const int sm=0;\
	gl_FragColor.xyz=vec3(computeShadow(shadowMapMatrix_[sm*sc+sp],shadowMap_[sm*sc+sp],0.001,0.0,0.05,vec3(0.1)))*vec3(0.75);*/\
}";
			scene._shaders["Shader_" + n] = sys.createShader(vs, fs, ["position", "normal", "uv"], alluniforms);
			//console.log(fs)
			alob(scene.meshes, function (mesh) {
				var materialUID = mesh.material.materialData;
				if (material[0].uid === materialUID) {
					mesh._materialShaderFlag = scene._shaders["Shader_" + n].programFlag;
				}
			});
		});
		var s_vs = "attribute vec3 position;\n\
uniform mat4 CameraMat,MoveMat;varying vec4 u;\n\
void main(){\n\
	vec4 absolutePosition=MoveMat*vec4(position,1.0);\n\
	gl_Position=CameraMat*absolutePosition;\n\
	u=gl_Position;\n\
}";
		var s_fs = "#extension GL_OES_standard_derivatives : enable\nprecision highp float;varying vec4 u;\n\
vec2 packHalf(float depth){const vec2 bitOffset = vec2(1.0 / 255., 0.);\
vec2 color = vec2(depth, fract(depth * 255.));return color - (color.yy * bitOffset);}\
void main()\n\
{vec3 uz=u.xyz/u.w;float z=uz.z*0.5+0.5;"+shadow.shadowMapFunction+"}";
		scene._shaders["ShadowShader"] = sys.createShader(s_vs, s_fs, ["position"], ["CameraMat", "MoveMat"]);
	};
	sys.resultShader = sys.createShader("attribute vec3 position;varying vec2 uvs;\n\
void main(){gl_Position=vec4(position,1.0);uvs=position.xy*0.5+0.5;}", "precision highp float;uniform sampler2D sampler;varying vec2 uvs;void main(){gl_FragColor=texture2D(sampler,uvs);}",
["position"], ["resolution", "inverse_resolution", "sampler"]);
	this.getJson = function (url, callback) {
		var xhr = new XMLHttpRequest();
		xhr.open("GET", url, true);
		xhr.send();
		xhr.onload = function () { callback(JSON.parse(xhr.response));}
	}
	sys.pPlane = {
		vertex: [1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0],
		normal: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		index: [0, 1, 2, 3, 0, 2]
	};
	sys.pp = this.createElement({ vertex: sys.pPlane.vertex, index: sys.pPlane.index, normal: sys.pPlane.normal });
	sys.postProcessFunctionDraw = function (prog, fb, resolution, size) {
		gl.disable(gl.CULL_FACE);
		gl.viewport(0, 0, size[0], size[1]);
		gl.clearColor(1, 1, 1, 1.0); gl.clearDepth(1.0);
		prog.enableAttribute("position");
		sys.activeTexture(fb.texture, prog.uniforms.sampler, 0);
		sys.setUniform(prog.uniforms["inverse_resolution"], resolution, "vec2");
		sys.setVertex(prog.attributes.position, sys.pp.vertexBuffer, 3);
		sys.bindIndex(sys.pp.indexBuffer);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
		sys.drawElement(sys.pp.len);
		prog.disableAttribute("position");
	};
	sys.postProcessFunction = function (prog, fb, direction, newFB) {
		gl.disable(gl.CULL_FACE);
		gl.viewport(0, 0, newFB.texture.size[0], newFB.texture.size[1]);
		gl.clearColor(1, 1, 1, 1.0); gl.clearDepth(1.0);
		prog.enableAttribute("position");
		sys.activeTexture(fb.texture, prog.uniforms.sampler, 0);
		sys.setUniform(prog.uniforms["direction"], direction, "vec2");
		sys.setUniform(prog.uniforms["resolution"], [newFB.texture.size[0], newFB.texture.size[1]], "vec2");
		sys.setVertex(prog.attributes.position, sys.pp.vertexBuffer, 3);
		sys.bindIndex(sys.pp.indexBuffer);
		newFB.bind();
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
		sys.drawElement(sys.pp.len);
		newFB.unbind();
		prog.disableAllAttributes();
	};
}